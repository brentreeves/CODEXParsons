priming,extra_with_indentation_priming,scrambled_lines,prompt,codex_output,problem
,False,"def alarm_clock(day, vacation)
else:
return '10:00'
if day == 0 or day == 6:
else:
return 'off'
def alarm_clock(day, vacation):
else:
return '10:00'
if day == 0 || day == 6:
if vacation:
if day == 0 or day == 6:
return '7:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation)
else:
return '10:00'
if day == 0 or day == 6:
else:
return 'off'
def alarm_clock(day, vacation):
else:
return '10:00'
if day == 0 || day == 6:
if vacation:
if day == 0 or day == 6:
return '7:00'
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return 'off'
else:
return '10:00'
else:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
return '7:00'
else:
if day == 0 or day == 6:
return '10:00'
if vacation:
else:
if day == 0 || day == 6:
return 'off'
def alarm_clock(day, vacation):
else:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
return '7:00'
else:
if day == 0 or day == 6:
return '10:00'
if vacation:
else:
if day == 0 || day == 6:
return 'off'
def alarm_clock(day, vacation):
else:
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
else:
if day == 0 or day == 6:
return 'off'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
return '7:00'
else:
if vacation:
if day == 0 or day == 6:
return 'off'
def alarm_clock(day, vacation):
if day == 0 || day == 6:
else:
return '10:00'
else:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
return '7:00'
else:
if vacation:
if day == 0 or day == 6:
return 'off'
def alarm_clock(day, vacation):
if day == 0 || day == 6:
else:
return '10:00'
else:
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return 'off'
else:
return '10:00'
else:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
return 'off'
if day == 0 or day == 6:
if vacation:
return '10:00'
else:
else:
def alarm_clock(day, vacation)
if day == 0 || day == 6:
return '10:00'
return '7:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
return 'off'
if day == 0 or day == 6:
if vacation:
return '10:00'
else:
else:
def alarm_clock(day, vacation)
if day == 0 || day == 6:
return '10:00'
return '7:00'
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return 'off'
else:
return '10:00'
else:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
else:
if vacation:
def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
return 'off'
return '10:00'
else:
return '7:00'
else:
if day == 0 || day == 6:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
else:
if vacation:
def alarm_clock(day, vacation)
return '10:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
return 'off'
return '10:00'
else:
return '7:00'
else:
if day == 0 || day == 6:
# Solution
","def alarm_clock(day, vacation):
  if vacation:
    if day == 0 or day == 6:
      return 'off'
    else:
      return '10:00'
  else:
    if day == 0 or day == 6:
      return '10:00'
    else:
      return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
else:
return 'off'
return '10:00'
else:
return '10:00'
if day == 0 or day == 6:
def alarm_clock(day, vacation)
return '7:00'
if day == 0 or day == 6:
else:
if vacation:
if day == 0 || day == 6:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
else:
return 'off'
return '10:00'
else:
return '10:00'
if day == 0 or day == 6:
def alarm_clock(day, vacation)
return '7:00'
if day == 0 or day == 6:
else:
if vacation:
if day == 0 || day == 6:
# Solution
","def alarm_clock(day, vacation):
  if vacation:
    if day == 0 or day == 6:
      return 'off'
    else:
      return '10:00'
  else:
    if day == 0 or day == 6:
      return '10:00'
    else:
      return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
if day == 0 or day == 6:
if vacation:
if day == 0 || day == 6:
else:
else:
else:
if day == 0 or day == 6:
return '7:00'
return '10:00'
def alarm_clock(day, vacation)
return '10:00'
return 'off'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
if day == 0 or day == 6:
if vacation:
if day == 0 || day == 6:
else:
else:
else:
if day == 0 or day == 6:
return '7:00'
return '10:00'
def alarm_clock(day, vacation)
return '10:00'
return 'off'
# Solution
","def alarm_clock(day, vacation):
if day == 0 or day == 6:
if vacation:
return 'off'
else:
return '10:00'
else:
if vacation:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
if day == 0 || day == 6:
return 'off'
else:
else:
def alarm_clock(day, vacation)
return '10:00'
if vacation:
else:
return '10:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
return '7:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
if day == 0 || day == 6:
return 'off'
else:
else:
def alarm_clock(day, vacation)
return '10:00'
if vacation:
else:
return '10:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
return '7:00'
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return 'off'
else:
return '10:00'
else:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
if vacation:
else:
if day == 0 || day == 6:
return '10:00'
return '10:00'
return '7:00'
return 'off'
if day == 0 or day == 6:
if day == 0 or day == 6:
else:
else:
def alarm_clock(day, vacation)","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
if vacation:
else:
if day == 0 || day == 6:
return '10:00'
return '10:00'
return '7:00'
return 'off'
if day == 0 or day == 6:
if day == 0 or day == 6:
else:
else:
def alarm_clock(day, vacation)
# Solution
","def alarm_clock(day, vacation):
if vacation:
if day == 0 or day == 6:
return 'off'
else:
return '10:00'
else:
if day == 0 or day == 6:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"def alarm_clock(day, vacation):
return '10:00'
if vacation:
return 'off'
return '7:00'
def alarm_clock(day, vacation)
if day == 0 || day == 6:
else:
else:
if day == 0 or day == 6:
else:
if day == 0 or day == 6:
return '10:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
def alarm_clock(day, vacation):
return '10:00'
if vacation:
return 'off'
return '7:00'
def alarm_clock(day, vacation)
if day == 0 || day == 6:
else:
else:
if day == 0 or day == 6:
else:
if day == 0 or day == 6:
return '10:00'
# Solution
","def alarm_clock(day, vacation):
if day == 0 or day == 6:
if vacation:
return 'off'
else:
return '10:00'
else:
if vacation:
return '10:00'
else:
return '7:00'
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
return '7:00'
if vacation:
else:
return 'off'
return '10:00'
return '10:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
return '7:00'
if vacation:
else:
return 'off'
return '10:00'
return '10:00'
# Solution
","def alarm_clock(day, vacation):
    if day == 0 or day == 6:
        if vacation:
            return '10:00'
        else:
            return 'off'
    else:
        if vacation:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation)
return 'off'
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
return '10:00'
return '10:00'
if vacation:
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
return '7:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation)
return 'off'
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
return '10:00'
return '10:00'
if vacation:
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
return '7:00'
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation):
def alarm_clock(day, vacation)
return '7:00'
if day == 0 or day == 6:
return '10:00'
return '10:00'
return 'off'
else:
if day == 0 || day == 6:
else:
if vacation:
if day == 0 or day == 6:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation):
def alarm_clock(day, vacation)
return '7:00'
if day == 0 or day == 6:
return '10:00'
return '10:00'
return 'off'
else:
if day == 0 || day == 6:
else:
if vacation:
if day == 0 or day == 6:
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
return '7:00'
else:
else:
return '10:00'
if day == 0 || day == 6:
if vacation:
return '10:00'
return 'off'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
return '7:00'
else:
else:
return '10:00'
if day == 0 || day == 6:
if vacation:
return '10:00'
return 'off'
# Solution
","def alarm_clock(day, vacation):
  if day == 0 or day == 6:
    if vacation:
      return 'off'
    return '10:00'
  else:
    if vacation:
      return '10:00'
    return '7:00'
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
if day == 0 or day == 6:
def alarm_clock(day, vacation)
return 'off'
else:
if day == 0 || day == 6:
return '10:00'
return '10:00'
return '7:00'
else:
if vacation:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
if day == 0 or day == 6:
def alarm_clock(day, vacation)
return 'off'
else:
if day == 0 || day == 6:
return '10:00'
return '10:00'
return '7:00'
else:
if vacation:
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
return '10:00'
return '7:00'
return '10:00'
if vacation:
return 'off'
def alarm_clock(day, vacation)
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
else:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation):
if day == 0 or day == 6:
return '10:00'
return '7:00'
return '10:00'
if vacation:
return 'off'
def alarm_clock(day, vacation)
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
else:
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
def alarm_clock(day, vacation):
return '10:00'
if day == 0 or day == 6:
return '7:00'
return 'off'
else:
if vacation:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
else:
return '10:00'
if day == 0 || day == 6:","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
def alarm_clock(day, vacation):
return '10:00'
if day == 0 or day == 6:
return '7:00'
return 'off'
else:
if vacation:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
else:
return '10:00'
if day == 0 || day == 6:
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
else:
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
if vacation:
return 'off'
def alarm_clock(day, vacation)
return '10:00'
return '10:00'
return '7:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
else:
if day == 0 or day == 6:
def alarm_clock(day, vacation):
else:
if day == 0 or day == 6:
if day == 0 || day == 6:
if vacation:
return 'off'
def alarm_clock(day, vacation)
return '10:00'
return '10:00'
return '7:00'
# Solution
","def alarm_clock(day, vacation):
  if vacation:
    if day == 0 or day == 6:
      return 'off'
    else:
      return '10:00'
  else:
    if day == 0 or day == 6:
      return '10:00'
    else:
      return '7:00'
 
",Ericson2022figure4
,False,"else:
else:
if day == 0 or day == 6:
return '10:00'
if vacation:
return '7:00'
return 'off'
else:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
if day == 0 || day == 6:
def alarm_clock(day, vacation):
return '10:00'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
else:
if day == 0 or day == 6:
return '10:00'
if vacation:
return '7:00'
return 'off'
else:
def alarm_clock(day, vacation)
if day == 0 or day == 6:
if day == 0 || day == 6:
def alarm_clock(day, vacation):
return '10:00'
# Solution
","def alarm_clock(day, vacation):
    if day == 0 or day == 6:
        if vacation:
            return 'off'
        else:
            return '10:00'
    else:
        if vacation:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"else:
else:
if day == 0 || day == 6:
def alarm_clock(day, vacation)
return '10:00'
if vacation:
return '10:00'
return '7:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
else:
def alarm_clock(day, vacation):
return 'off'","# Problem description
Put the code blocks below in order to solve the following problem. There are two extra blocks that are not needed in a correct solution. Given a day of the week encoded as 0=Sum, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form ""7:00"" indicating when the alarm clock should ring. Weekdays, the alarm should be ""7:00"" and on the weekends it should be ""10:00"". Unless we are on vacation -- then on weekdays it should be ""10:00"" and weekends it should be ""off"".
# Scrambled lines
else:
else:
if day == 0 || day == 6:
def alarm_clock(day, vacation)
return '10:00'
if vacation:
return '10:00'
return '7:00'
if day == 0 or day == 6:
if day == 0 or day == 6:
else:
def alarm_clock(day, vacation):
return 'off'
# Solution
","def alarm_clock(day, vacation):
    if vacation:
        if day == 0 or day == 6:
            return 'off'
        else:
            return '10:00'
    else:
        if day == 0 or day == 6:
            return '10:00'
        else:
            return '7:00'
 
 
",Ericson2022figure4
,False,"curmax=alist[0]
curmax=item
if len(alist) > 0:
for item in alist:
def findmax(alist):
if item > curmax:
return curmax","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
curmax=item
if len(alist) > 0:
for item in alist:
def findmax(alist):
if item > curmax:
return curmax
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
    else:
        return None
",Karavirta2012Figure3
,False,"curmax=alist[0]
curmax=item
return curmax
if len(alist) > 0:
if item > curmax:
for item in alist:
def findmax(alist):","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
curmax=item
return curmax
if len(alist) > 0:
if item > curmax:
for item in alist:
def findmax(alist):
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
def findmax(alist):
for item in alist:
if len(alist) > 0:
return curmax
if item > curmax:
curmax=item","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
def findmax(alist):
for item in alist:
if len(alist) > 0:
return curmax
if item > curmax:
curmax=item
# Solution
","def findmax(alist):
    curmax = alist[0]
    for item in alist:
        if item > curmax:
            curmax = item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
def findmax(alist):
for item in alist:
return curmax
curmax=item
if item > curmax:
if len(alist) > 0:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
def findmax(alist):
for item in alist:
return curmax
curmax=item
if item > curmax:
if len(alist) > 0:
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
def findmax(alist):
if item > curmax:
return curmax
if len(alist) > 0:
for item in alist:
curmax=item","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
def findmax(alist):
if item > curmax:
return curmax
if len(alist) > 0:
for item in alist:
curmax=item
# Solution
","def findmax(alist):
    curmax = alist[0]
    for item in alist:
        if item > curmax:
            curmax = item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
def findmax(alist):
return curmax
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=item","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
def findmax(alist):
return curmax
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=item
# Solution
","def findmax(alist):
    curmax = alist[0]
    for item in alist:
        if item > curmax:
            curmax = item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
for item in alist:
curmax=item
def findmax(alist):
if item > curmax:
return curmax
if len(alist) > 0:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
for item in alist:
curmax=item
def findmax(alist):
if item > curmax:
return curmax
if len(alist) > 0:
# Solution
","def findmax(alist):
    curmax = alist[0]
    for item in alist:
        if item > curmax:
            curmax = item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
for item in alist:
if len(alist) > 0:
if item > curmax:
def findmax(alist):
return curmax
curmax=item","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
for item in alist:
if len(alist) > 0:
if item > curmax:
def findmax(alist):
return curmax
curmax=item
# Solution
","def findmax(alist):
    curmax=alist[0]
    for item in alist:
        if item > curmax:
            curmax=item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
for item in alist:
if len(alist) > 0:
return curmax
curmax=item
if item > curmax:
def findmax(alist):","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
for item in alist:
if len(alist) > 0:
return curmax
curmax=item
if item > curmax:
def findmax(alist):
# Solution
","def findmax(alist):
    curmax=alist[0]
    for item in alist:
        if item > curmax:
            curmax=item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
for item in alist:
return curmax
if len(alist) > 0:
def findmax(alist):
curmax=item
if item > curmax:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
for item in alist:
return curmax
if len(alist) > 0:
def findmax(alist):
curmax=item
if item > curmax:
# Solution
","def findmax(alist):
    curmax=alist[0]
    for item in alist:
        if item > curmax:
            curmax=item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
if item > curmax:
def findmax(alist):
for item in alist:
return curmax
curmax=item
if len(alist) > 0:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
if item > curmax:
def findmax(alist):
for item in alist:
return curmax
curmax=item
if len(alist) > 0:
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax=alist[0]
        for item in alist:
            if item > curmax:
                curmax=item
        return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
if item > curmax:
return curmax
for item in alist:
curmax=item
def findmax(alist):
if len(alist) > 0:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
if item > curmax:
return curmax
for item in alist:
curmax=item
def findmax(alist):
if len(alist) > 0:
# Solution
","def findmax(alist):
if len(alist) > 0:
curmax=alist[0]
for item in alist:
if item > curmax:
curmax=item
return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
if len(alist) > 0:
curmax=item
if item > curmax:
def findmax(alist):
for item in alist:
return curmax","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
if len(alist) > 0:
curmax=item
if item > curmax:
def findmax(alist):
for item in alist:
return curmax
# Solution
","def findmax(alist):
    curmax=alist[0]
    for item in alist:
        if item > curmax:
            curmax=item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
if len(alist) > 0:
def findmax(alist):
if item > curmax:
for item in alist:
curmax=item
return curmax","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
if len(alist) > 0:
def findmax(alist):
if item > curmax:
for item in alist:
curmax=item
return curmax
# Solution
","def findmax(alist):
    curmax=alist[0]
    for item in alist:
        if item > curmax:
            curmax=item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
if len(alist) > 0:
return curmax
curmax=item
for item in alist:
def findmax(alist):
if item > curmax:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
if len(alist) > 0:
return curmax
curmax=item
for item in alist:
def findmax(alist):
if item > curmax:
# Solution
","def findmax(alist):
    curmax = alist[0]
    for item in alist:
        if item > curmax:
            curmax = item
    return curmax
",Karavirta2012Figure3
,False,"curmax=alist[0]
return curmax
def findmax(alist):
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=item","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
return curmax
def findmax(alist):
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=item
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax=alist[0]
        for item in alist:
            if item > curmax:
                curmax=item
        return curmax
    else:
        return None
",Karavirta2012Figure3
,False,"curmax=alist[0]
return curmax
if len(alist) > 0:
for item in alist:
def findmax(alist):
curmax=item
if item > curmax:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=alist[0]
return curmax
if len(alist) > 0:
for item in alist:
def findmax(alist):
curmax=item
if item > curmax:
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax=alist[0]
        for item in alist:
            if item > curmax:
                curmax=item
        return curmax
    else:
        return None
",Karavirta2012Figure3
,False,"curmax=item
curmax=alist[0]
if item > curmax:
def findmax(alist):
return curmax
for item in alist:
if len(alist) > 0:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=item
curmax=alist[0]
if item > curmax:
def findmax(alist):
return curmax
for item in alist:
if len(alist) > 0:
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
    else:
        return None
",Karavirta2012Figure3
,False,"curmax=item
curmax=alist[0]
return curmax
if item > curmax:
if len(alist) > 0:
def findmax(alist):
for item in alist:","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=item
curmax=alist[0]
return curmax
if item > curmax:
if len(alist) > 0:
def findmax(alist):
for item in alist:
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
",Karavirta2012Figure3
,False,"curmax=item
def findmax(alist):
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=alist[0]
return curmax","# Problem description
construct a function that finds the maximum value in a given list
# Scrambled lines
curmax=item
def findmax(alist):
for item in alist:
if len(alist) > 0:
if item > curmax:
curmax=alist[0]
return curmax
# Solution
","def findmax(alist):
    if len(alist) > 0:
        curmax = alist[0]
        for item in alist:
            if item > curmax:
                curmax = item
        return curmax
    else:
        return None
",Karavirta2012Figure3
,False,"def filter_strings(str_list):
for word in str_list:
new_list = []
new_list.append(word)
return new_list
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
for word in str_list:
new_list = []
new_list.append(word)
return new_list
if len(word) > 3:
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"def filter_strings(str_list):
for word in str_list:
new_list.append(word)
new_list = []
return new_list
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
for word in str_list:
new_list.append(word)
new_list = []
return new_list
if len(word) > 3:
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"def filter_strings(str_list):
for word in str_list:
return new_list
if len(word) > 3:
new_list = []
new_list.append(word)","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
for word in str_list:
return new_list
if len(word) > 3:
new_list = []
new_list.append(word)
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
for word in str_list:
return new_list
new_list.append(word)
new_list = []
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
for word in str_list:
return new_list
new_list.append(word)
new_list = []
if len(word) > 3:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
if len(word) > 3:
new_list = []
new_list.append(word)
return new_list
for word in str_list:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
if len(word) > 3:
new_list = []
new_list.append(word)
return new_list
for word in str_list:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
if len(word) > 3:
return new_list
new_list.append(word)
new_list = []
for word in str_list:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
if len(word) > 3:
return new_list
new_list.append(word)
new_list = []
for word in str_list:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list = []
if len(word) > 3:
for word in str_list:
return new_list
new_list.append(word)","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list = []
if len(word) > 3:
for word in str_list:
return new_list
new_list.append(word)
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list = []
return new_list
for word in str_list:
new_list.append(word)
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list = []
return new_list
for word in str_list:
new_list.append(word)
if len(word) > 3:
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list = []
return new_list
new_list.append(word)
for word in str_list:
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list = []
return new_list
new_list.append(word)
for word in str_list:
if len(word) > 3:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list.append(word)
if len(word) > 3:
for word in str_list:
new_list = []
return new_list","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list.append(word)
if len(word) > 3:
for word in str_list:
new_list = []
return new_list
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list.append(word)
new_list = []
for word in str_list:
return new_list
if len(word) > 3:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list.append(word)
new_list = []
for word in str_list:
return new_list
if len(word) > 3:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"def filter_strings(str_list):
new_list.append(word)
return new_list
if len(word) > 3:
new_list = []
for word in str_list:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
new_list.append(word)
return new_list
if len(word) > 3:
new_list = []
for word in str_list:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
",Hou2022figure2
,False,"def filter_strings(str_list):
return new_list
new_list = []
if len(word) > 3:
new_list.append(word)
for word in str_list:","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
def filter_strings(str_list):
return new_list
new_list = []
if len(word) > 3:
new_list.append(word)
for word in str_list:
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"for word in str_list:
def filter_strings(str_list):
if len(word) > 3:
new_list.append(word)
return new_list
new_list = []","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
def filter_strings(str_list):
if len(word) > 3:
new_list.append(word)
return new_list
new_list = []
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"for word in str_list:
def filter_strings(str_list):
if len(word) > 3:
return new_list
new_list = []
new_list.append(word)","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
def filter_strings(str_list):
if len(word) > 3:
return new_list
new_list = []
new_list.append(word)
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"for word in str_list:
def filter_strings(str_list):
new_list = []
return new_list
if len(word) > 3:
new_list.append(word)","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
def filter_strings(str_list):
new_list = []
return new_list
if len(word) > 3:
new_list.append(word)
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"for word in str_list:
def filter_strings(str_list):
return new_list
new_list.append(word)
if len(word) > 3:
new_list = []","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
def filter_strings(str_list):
return new_list
new_list.append(word)
if len(word) > 3:
new_list = []
# Solution
","def filter_strings(str_list):
    new_list = []
    for word in str_list:
        if len(word) > 3:
            new_list.append(word)
    return new_list
 
",Hou2022figure2
,False,"for word in str_list:
if len(word) > 3:
new_list = []
return new_list
def filter_strings(str_list):
new_list.append(word)","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
if len(word) > 3:
new_list = []
return new_list
def filter_strings(str_list):
new_list.append(word)
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
new_list = []
def filter_strings(str_list):","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
new_list = []
def filter_strings(str_list):
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"for word in str_list:
new_list = []
if len(word) > 3:
return new_list
new_list.append(word)
def filter_strings(str_list):","# Problem description
Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings([""Run"", ""she"", ""said""]) should return [""said""] and filter _strings([""It"", ""was"", ""a"", ""dark"", ""night""]) should return [""dark"", ""night""]
# Scrambled lines
for word in str_list:
new_list = []
if len(word) > 3:
return new_list
new_list.append(word)
def filter_strings(str_list):
# Solution
","def filter_strings(str_list):
new_list = []
for word in str_list:
if len(word) > 3:
new_list.append(word)
return new_list
",Hou2022figure2
,False,"def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return False
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return False
return True
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
for i in range (len(nums)-1):
return False
if nums[i] == 2 and nums [i+1] == 2:
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
for i in range (len(nums)-1):
return False
if nums[i] == 2 and nums [i+1] == 2:
return True
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
for i in range (len(nums)-1):
return True
if nums[i] == 2 and nums [i+1] == 2:
return False","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
for i in range (len(nums)-1):
return True
if nums[i] == 2 and nums [i+1] == 2:
return False
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
for i in range (len(nums)-1):
return True
return False
if nums[i] == 2 and nums [i+1] == 2:","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
for i in range (len(nums)-1):
return True
return False
if nums[i] == 2 and nums [i+1] == 2:
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return False
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return False
return True
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return True
return False","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return True
return False
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return False
for i in range (len(nums)-1):
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return False
for i in range (len(nums)-1):
return True
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return False
return True
for i in range (len(nums)-1):","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return False
return True
for i in range (len(nums)-1):
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return True
for i in range (len(nums)-1):
return False","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return True
for i in range (len(nums)-1):
return False
# Solution
","def has22(nums):
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
for i in range (len(nums)-1):","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
if nums[i] == 2 and nums [i+1] == 2:
return True
return False
for i in range (len(nums)-1):
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return True
# Solution
","def has22(nums):
  for i in range (len(nums)-1):
    if nums[i] == 2 and nums [i+1] == 2:
      return True
  return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
for i in range (len(nums)-1):
return True
if nums[i] == 2 and nums [i+1] == 2:","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
for i in range (len(nums)-1):
return True
if nums[i] == 2 and nums [i+1] == 2:
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return True","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return True
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
if nums[i] == 2 and nums [i+1] == 2:
return True
for i in range (len(nums)-1):","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
if nums[i] == 2 and nums [i+1] == 2:
return True
for i in range (len(nums)-1):
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
return True
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
return True
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return False
return True
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return False
return True
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return True
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return False","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return True
for i in range (len(nums)-1):
if nums[i] == 2 and nums [i+1] == 2:
return False
# Solution
","def has22(nums):
  for i in range (len(nums)-1):
    if nums[i] == 2 and nums [i+1] == 2:
      return True
  return False
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return True
for i in range (len(nums)-1):
return False
if nums[i] == 2 and nums [i+1] == 2:","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return True
for i in range (len(nums)-1):
return False
if nums[i] == 2 and nums [i+1] == 2:
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return True
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return False","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return True
if nums[i] == 2 and nums [i+1] == 2:
for i in range (len(nums)-1):
return False
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def has22(nums):
return True
if nums[i] == 2 and nums [i+1] == 2:
return False
for i in range (len(nums)-1):","# Problem description
Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for has22([1,2,2]) since there are two adjacent items equal to 2 (at index 1 and 2) and False for has22(2,1,2) since the 2's are not adjacent
# Scrambled lines
def has22(nums):
return True
if nums[i] == 2 and nums [i+1] == 2:
return False
for i in range (len(nums)-1):
# Solution
","def has22(nums):
    for i in range (len(nums)-1):
        if nums[i] == 2 and nums [i+1] == 2:
            return True
    return False
 
",Haynes_Magyar2022figure2
,False,"def getSum(numList):
for num in numList:
return sum
sum = 0
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
for num in numList:
return sum
sum = 0
sum = sum + num
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
for num in numList:
return sum
sum = sum + num
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
for num in numList:
return sum
sum = sum + num
sum = 0
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
for num in numList:
sum = 0
return sum
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
for num in numList:
sum = 0
return sum
sum = sum + num
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
for num in numList:
sum = 0
sum = sum + num
return sum","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
for num in numList:
sum = 0
sum = sum + num
return sum
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
for num in numList:
sum = sum + num
return sum
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
for num in numList:
sum = sum + num
return sum
sum = 0
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
return sum
sum = 0
sum = sum + num
for num in numList:","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
return sum
sum = 0
sum = sum + num
for num in numList:
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
return sum
sum = sum + num
for num in numList:
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
return sum
sum = sum + num
for num in numList:
sum = 0
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
return sum
sum = sum + num
sum = 0
for num in numList:","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
return sum
sum = sum + num
sum = 0
for num in numList:
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = 0
for num in numList:
return sum
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = 0
for num in numList:
return sum
sum = sum + num
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = 0
return sum
for num in numList:
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = 0
return sum
for num in numList:
sum = sum + num
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = 0
return sum
sum = sum + num
for num in numList:","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = 0
return sum
sum = sum + num
for num in numList:
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = 0
sum = sum + num
return sum
for num in numList:","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = 0
sum = sum + num
return sum
for num in numList:
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = sum + num
for num in numList:
sum = 0
return sum","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = sum + num
for num in numList:
sum = 0
return sum
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = sum + num
return sum
for num in numList:
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = sum + num
return sum
for num in numList:
sum = 0
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"def getSum(numList):
sum = sum + num
return sum
sum = 0
for num in numList:","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
def getSum(numList):
sum = sum + num
return sum
sum = 0
for num in numList:
# Solution
","def getSum(numList):
sum = 0
for num in numList:
sum = sum + num
return sum
",Ericson2017figure1
,False,"for num in numList:
def getSum(numList):
return sum
sum = 0
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
for num in numList:
def getSum(numList):
return sum
sum = 0
sum = sum + num
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"for num in numList:
def getSum(numList):
return sum
sum = sum + num
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
for num in numList:
def getSum(numList):
return sum
sum = sum + num
sum = 0
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"for num in numList:
def getSum(numList):
sum = 0
return sum
sum = sum + num","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
for num in numList:
def getSum(numList):
sum = 0
return sum
sum = sum + num
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"for num in numList:
def getSum(numList):
sum = 0
sum = sum + num
return sum","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
for num in numList:
def getSum(numList):
sum = 0
sum = sum + num
return sum
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"for num in numList:
def getSum(numList):
sum = sum + num
return sum
sum = 0","# Problem description
write a function getSum(numList) that returns the sum of a list of numbers.
# Scrambled lines
for num in numList:
def getSum(numList):
sum = sum + num
return sum
sum = 0
# Solution
","def getSum(numList):
    sum = 0
    for num in numList:
        sum = sum + num
    return sum
",Ericson2017figure1
,False,"Class Person:
class Person:
self.first = first
def __init__(self, first, last):
return(self.first[1] + self.last[1])
def __str__(self):
def __init__(first, last):
return (self.first + "" "" + self.last)
def initials(self):
self.last = last
return (self.first + self.last)
return(self.first[0] + self.last[0])","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
class Person:
self.first = first
def __init__(self, first, last):
return(self.first[1] + self.last[1])
def __str__(self):
def __init__(first, last):
return (self.first + "" "" + self.last)
def initials(self):
self.last = last
return (self.first + self.last)
return(self.first[0] + self.last[0])
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
",Ericson2022figure3
,False,"Class Person:
def __init__(first, last):
class Person:
def __init__(self, first, last):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
def initials(self):
self.last = last
self.first = first
def __str__(self):
return (self.first + self.last)","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
def __init__(first, last):
class Person:
def __init__(self, first, last):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
def initials(self):
self.last = last
self.first = first
def __str__(self):
return (self.first + self.last)
# Solution
","
class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
",Ericson2022figure3
,False,"Class Person:
def __init__(first, last):
def initials(self):
self.first = first
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
self.last = last
def __str__(self):
return (self.first + self.last)
class Person:
def __init__(self, first, last):
return(self.first[1] + self.last[1])","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
def __init__(first, last):
def initials(self):
self.first = first
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
self.last = last
def __str__(self):
return (self.first + self.last)
class Person:
def __init__(self, first, last):
return(self.first[1] + self.last[1])
# Solution
","
class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 ",Ericson2022figure3
,False,"Class Person:
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first
def __init__(first, last):
return (self.first + "" "" + self.last)
def __init__(self, first, last):
return(self.first[1] + self.last[1])
return (self.first + self.last)
class Person:
self.last = last
def initials(self):","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first
def __init__(first, last):
return (self.first + "" "" + self.last)
def __init__(self, first, last):
return(self.first[1] + self.last[1])
return (self.first + self.last)
class Person:
self.last = last
def initials(self):
# Solution
","
class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
",Ericson2022figure3
,False,"Class Person:
def initials(self):
def __str__(self):
self.last = last
return(self.first[0] + self.last[0])
def __init__(self, first, last):
return (self.first + "" "" + self.last)
def __init__(first, last):
class Person:
self.first = first
return (self.first + self.last)
return(self.first[1] + self.last[1])","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
def initials(self):
def __str__(self):
self.last = last
return(self.first[0] + self.last[0])
def __init__(self, first, last):
return (self.first + "" "" + self.last)
def __init__(first, last):
class Person:
self.first = first
return (self.first + self.last)
return(self.first[1] + self.last[1])
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"Class Person:
return (self.first + "" "" + self.last)
def initials(self):
return (self.first + self.last)
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
class Person:
def __str__(self):
self.last = last
def __init__(self, first, last):
self.first = first
def __init__(first, last):","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
return (self.first + "" "" + self.last)
def initials(self):
return (self.first + self.last)
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
class Person:
def __str__(self):
self.last = last
def __init__(self, first, last):
self.first = first
def __init__(first, last):
# Solution
","
class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return (self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"Class Person:
return (self.first + "" "" + self.last)
self.first = first
def __init__(self, first, last):
class Person:
self.last = last
def initials(self):
def __init__(first, last):
def __str__(self):
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
return (self.first + self.last)","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
return (self.first + "" "" + self.last)
self.first = first
def __init__(self, first, last):
class Person:
self.last = last
def initials(self):
def __init__(first, last):
def __str__(self):
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
return (self.first + self.last)
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"Class Person:
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __str__(self):
def initials(self):
def __init__(self, first, last):
return (self.first + self.last)
class Person:
self.last = last
self.first = first
def __init__(first, last):","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
Class Person:
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __str__(self):
def initials(self):
def __init__(self, first, last):
return (self.first + self.last)
class Person:
self.last = last
self.first = first
def __init__(first, last):
# Solution
","
class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def __init__(first, last):
def initials(self):
return(self.first[0] + self.last[0])
return (self.first + self.last)
self.last = last
Class Person:
return(self.first[1] + self.last[1])
return (self.first + "" "" + self.last)
def __str__(self):
def __init__(self, first, last):
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def __init__(first, last):
def initials(self):
return(self.first[0] + self.last[0])
return (self.first + self.last)
self.last = last
Class Person:
return(self.first[1] + self.last[1])
return (self.first + "" "" + self.last)
def __str__(self):
def __init__(self, first, last):
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
",Ericson2022figure3
,False,"class Person:
def __init__(first, last):
return(self.first[1] + self.last[1])
def initials(self):
def __init__(self, first, last):
Class Person:
return (self.first + self.last)
return (self.first + "" "" + self.last)
self.last = last
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def __init__(first, last):
return(self.first[1] + self.last[1])
def initials(self):
def __init__(self, first, last):
Class Person:
return (self.first + self.last)
return (self.first + "" "" + self.last)
self.last = last
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def __init__(self, first, last):
def initials(self):
Class Person:
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
return (self.first + self.last)
def __init__(first, last):
self.last = last
def __str__(self):
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def __init__(self, first, last):
def initials(self):
Class Person:
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
return (self.first + "" "" + self.last)
return (self.first + self.last)
def __init__(first, last):
self.last = last
def __str__(self):
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def __init__(self, first, last):
return(self.first[0] + self.last[0])
def __str__(self):
return (self.first + self.last)
Class Person:
def __init__(first, last):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def initials(self):
self.last = last
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def __init__(self, first, last):
return(self.first[0] + self.last[0])
def __str__(self):
return (self.first + self.last)
Class Person:
def __init__(first, last):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def initials(self):
self.last = last
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def __str__(self):
def __init__(self, first, last):
self.first = first
self.last = last
return (self.first + "" "" + self.last)
return(self.first[0] + self.last[0])
return(self.first[1] + self.last[1])
def initials(self):
def __init__(first, last):
Class Person:
return (self.first + self.last)","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def __str__(self):
def __init__(self, first, last):
self.first = first
self.last = last
return (self.first + "" "" + self.last)
return(self.first[0] + self.last[0])
return(self.first[1] + self.last[1])
def initials(self):
def __init__(first, last):
Class Person:
return (self.first + self.last)
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def initials(self):
return(self.first[1] + self.last[1])
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first
def __init__(self, first, last):
def __init__(first, last):
return (self.first + "" "" + self.last)
self.last = last
Class Person:
return (self.first + self.last)","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def initials(self):
return(self.first[1] + self.last[1])
def __str__(self):
return(self.first[0] + self.last[0])
self.first = first
def __init__(self, first, last):
def __init__(first, last):
return (self.first + "" "" + self.last)
self.last = last
Class Person:
return (self.first + self.last)
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return (self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
def initials(self):
self.first = first
def __init__(self, first, last):
self.last = last
return (self.first + self.last)
def __str__(self):
def __init__(first, last):
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
Class Person:
return (self.first + "" "" + self.last)","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
def initials(self):
self.first = first
def __init__(self, first, last):
self.last = last
return (self.first + self.last)
def __str__(self):
def __init__(first, last):
return(self.first[1] + self.last[1])
return(self.first[0] + self.last[0])
Class Person:
return (self.first + "" "" + self.last)
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
return (self.first + "" "" + self.last)
def __init__(self, first, last):
self.last = last
Class Person:
def __str__(self):
def initials(self):
return(self.first[1] + self.last[1])
def __init__(first, last):
return (self.first + self.last)
self.first = first
return(self.first[0] + self.last[0])","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
return (self.first + "" "" + self.last)
def __init__(self, first, last):
self.last = last
Class Person:
def __str__(self):
def initials(self):
return(self.first[1] + self.last[1])
def __init__(first, last):
return (self.first + self.last)
self.first = first
return(self.first[0] + self.last[0])
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
return (self.first + "" "" + self.last)
return(self.first[0] + self.last[0])
def __str__(self):
def initials(self):
def __init__(self, first, last):
def __init__(first, last):
return(self.first[1] + self.last[1])
return (self.first + self.last)
self.last = last
Class Person:
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
return (self.first + "" "" + self.last)
return(self.first[0] + self.last[0])
def __str__(self):
def initials(self):
def __init__(self, first, last):
def __init__(first, last):
return(self.first[1] + self.last[1])
return (self.first + self.last)
self.last = last
Class Person:
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
 
",Ericson2022figure3
,False,"class Person:
return (self.first + "" "" + self.last)
self.first = first
return(self.first[1] + self.last[1])
def __init__(self, first, last):
def __str__(self):
Class Person:
def __init__(first, last):
self.last = last
return (self.first + self.last)
def initials(self):
return(self.first[0] + self.last[0])","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
return (self.first + "" "" + self.last)
self.first = first
return(self.first[1] + self.last[1])
def __init__(self, first, last):
def __str__(self):
Class Person:
def __init__(first, last):
self.last = last
return (self.first + self.last)
def initials(self):
return(self.first[0] + self.last[0])
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
return (self.first + self.last)
def __str__(self):
self.last = last
def initials(self):
self.first = first
return(self.first[0] + self.last[0])
def __init__(first, last):
Class Person:
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __init__(self, first, last):","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
return (self.first + self.last)
def __str__(self):
self.last = last
def initials(self):
self.first = first
return(self.first[0] + self.last[0])
def __init__(first, last):
Class Person:
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __init__(self, first, last):
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"class Person:
return (self.first + self.last)
self.last = last
Class Person:
def __str__(self):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __init__(self, first, last):
return(self.first[0] + self.last[0])
def __init__(first, last):
def initials(self):
self.first = first","# Problem description
Put the code in order to define a Person class with a constructor (__init__), a method to print the object attributes (__str__), and an initials method which returns the first letter of the first name and the first letter of the last name.
# Scrambled lines
class Person:
return (self.first + self.last)
self.last = last
Class Person:
def __str__(self):
return (self.first + "" "" + self.last)
return(self.first[1] + self.last[1])
def __init__(self, first, last):
return(self.first[0] + self.last[0])
def __init__(first, last):
def initials(self):
self.first = first
# Solution
","class Person:
    def __init__(self, first, last):
        self.first = first
        self.last = last
    def __str__(self):
        return (self.first + "" "" + self.last)
    def initials(self):
        return(self.first[0] + self.last[0])
 
",Ericson2022figure3
,False,"def getAverageDropLowest(numList):
for index in range(len(numList)):
if value < lowest:
return 0
lowest = numList[0]
lowest = value
sum = sum + value
if len(numList) == 0:
sum = 0
value = numList[index]
return (sum - lowest) / (len(numList) - 1)","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
for index in range(len(numList)):
if value < lowest:
return 0
lowest = numList[0]
lowest = value
sum = sum + value
if len(numList) == 0:
sum = 0
value = numList[index]
return (sum - lowest) / (len(numList) - 1)
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
for index in range(len(numList)):
if value < lowest:
sum = 0
return (sum - lowest) / (len(numList) - 1)
sum = sum + value
return 0
if len(numList) == 0:
value = numList[index]
lowest = numList[0]
lowest = value","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
for index in range(len(numList)):
if value < lowest:
sum = 0
return (sum - lowest) / (len(numList) - 1)
sum = sum + value
return 0
if len(numList) == 0:
value = numList[index]
lowest = numList[0]
lowest = value
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
if len(numList) == 0:
lowest = numList[0]
value = numList[index]
sum = sum + value
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)
if value < lowest:
sum = 0
return 0
lowest = value","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
if len(numList) == 0:
lowest = numList[0]
value = numList[index]
sum = sum + value
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)
if value < lowest:
sum = 0
return 0
lowest = value
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
if value < lowest:
for index in range(len(numList)):
lowest = value
return (sum - lowest) / (len(numList) - 1)
return 0
value = numList[index]
sum = sum + value
lowest = numList[0]
sum = 0
if len(numList) == 0:","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
if value < lowest:
for index in range(len(numList)):
lowest = value
return (sum - lowest) / (len(numList) - 1)
return 0
value = numList[index]
sum = sum + value
lowest = numList[0]
sum = 0
if len(numList) == 0:
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
lowest = value
for index in range(len(numList)):
lowest = numList[0]
sum = sum + value
return 0
sum = 0
if len(numList) == 0:
if value < lowest:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
lowest = value
for index in range(len(numList)):
lowest = numList[0]
sum = sum + value
return 0
sum = 0
if len(numList) == 0:
if value < lowest:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
return (sum - lowest) / (len(numList) - 1)
return 0
lowest = value
lowest = numList[0]
if value < lowest:
sum = 0
value = numList[index]
for index in range(len(numList)):
sum = sum + value
if len(numList) == 0:","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
return (sum - lowest) / (len(numList) - 1)
return 0
lowest = value
lowest = numList[0]
if value < lowest:
sum = 0
value = numList[index]
for index in range(len(numList)):
sum = sum + value
if len(numList) == 0:
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
return 0
sum = 0
if len(numList) == 0:
sum = sum + value
lowest = numList[0]
lowest = value
if value < lowest:
value = numList[index]
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
return 0
sum = 0
if len(numList) == 0:
sum = sum + value
lowest = numList[0]
lowest = value
if value < lowest:
value = numList[index]
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)
# Solution
","def getAverageDropLowest(numList):
    sum = 0
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    for value in numList:
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
sum = 0
lowest = numList[0]
return (sum - lowest) / (len(numList) - 1)
sum = sum + value
value = numList[index]
if len(numList) == 0:
return 0
for index in range(len(numList)):
lowest = value
if value < lowest:","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
sum = 0
lowest = numList[0]
return (sum - lowest) / (len(numList) - 1)
sum = sum + value
value = numList[index]
if len(numList) == 0:
return 0
for index in range(len(numList)):
lowest = value
if value < lowest:
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
sum = 0
return 0
value = numList[index]
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)
lowest = numList[0]
if len(numList) == 0:
lowest = value
if value < lowest:
sum = sum + value","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
sum = 0
return 0
value = numList[index]
for index in range(len(numList)):
return (sum - lowest) / (len(numList) - 1)
lowest = numList[0]
if len(numList) == 0:
lowest = value
if value < lowest:
sum = sum + value
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = numList[0]
    for index in range(1, len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
sum = 0
value = numList[index]
lowest = value
sum = sum + value
lowest = numList[0]
if len(numList) == 0:
return 0
return (sum - lowest) / (len(numList) - 1)
for index in range(len(numList)):
if value < lowest:","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
sum = 0
value = numList[index]
lowest = value
sum = sum + value
lowest = numList[0]
if len(numList) == 0:
return 0
return (sum - lowest) / (len(numList) - 1)
for index in range(len(numList)):
if value < lowest:
# Solution
","def getAverageDropLowest(numList):
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    if len(numList) == 0:
        return 0
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def getAverageDropLowest(numList):
sum = sum + value
for index in range(len(numList)):
lowest = value
sum = 0
lowest = numList[0]
if len(numList) == 0:
return 0
return (sum - lowest) / (len(numList) - 1)
if value < lowest:
value = numList[index]","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
def getAverageDropLowest(numList):
sum = sum + value
for index in range(len(numList)):
lowest = value
sum = 0
lowest = numList[0]
if len(numList) == 0:
return 0
return (sum - lowest) / (len(numList) - 1)
if value < lowest:
value = numList[index]
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
def getAverageDropLowest(numList):
return 0
if len(numList) == 0:
sum = 0
if value < lowest:
value = numList[index]
lowest = value
lowest = numList[0]
return (sum - lowest) / (len(numList) - 1)
sum = sum + value","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
def getAverageDropLowest(numList):
return 0
if len(numList) == 0:
sum = 0
if value < lowest:
value = numList[index]
lowest = value
lowest = numList[0]
return (sum - lowest) / (len(numList) - 1)
sum = sum + value
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
if len(numList) == 0:
return 0
if value < lowest:
sum = sum + value
return (sum - lowest) / (len(numList) - 1)
lowest = numList[0]
value = numList[index]
sum = 0
lowest = value
def getAverageDropLowest(numList):","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
if len(numList) == 0:
return 0
if value < lowest:
sum = sum + value
return (sum - lowest) / (len(numList) - 1)
lowest = numList[0]
value = numList[index]
sum = 0
lowest = value
def getAverageDropLowest(numList):
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
",Ericson2022figure8
,False,"for index in range(len(numList)):
if value < lowest:
lowest = value
value = numList[index]
lowest = numList[0]
sum = 0
sum = sum + value
return 0
return (sum - lowest) / (len(numList) - 1)
if len(numList) == 0:
def getAverageDropLowest(numList):","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
if value < lowest:
lowest = value
value = numList[index]
lowest = numList[0]
sum = 0
sum = sum + value
return 0
return (sum - lowest) / (len(numList) - 1)
if len(numList) == 0:
def getAverageDropLowest(numList):
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
if value < lowest:
sum = sum + value
return 0
return (sum - lowest) / (len(numList) - 1)
def getAverageDropLowest(numList):
if len(numList) == 0:
lowest = value
lowest = numList[0]
sum = 0
value = numList[index]","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
if value < lowest:
sum = sum + value
return 0
return (sum - lowest) / (len(numList) - 1)
def getAverageDropLowest(numList):
if len(numList) == 0:
lowest = value
lowest = numList[0]
sum = 0
value = numList[index]
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
lowest = numList[0]
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
sum = sum + value
return 0
if value < lowest:
lowest = value
def getAverageDropLowest(numList):","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
lowest = numList[0]
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
sum = sum + value
return 0
if value < lowest:
lowest = value
def getAverageDropLowest(numList):
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
",Ericson2022figure8
,False,"for index in range(len(numList)):
lowest = numList[0]
value = numList[index]
return 0
sum = 0
def getAverageDropLowest(numList):
sum = sum + value
if value < lowest:
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
lowest = value","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
lowest = numList[0]
value = numList[index]
return 0
sum = 0
def getAverageDropLowest(numList):
sum = sum + value
if value < lowest:
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
lowest = value
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
return 0
return (sum - lowest) / (len(numList) - 1)
if len(numList) == 0:
lowest = value
def getAverageDropLowest(numList):
value = numList[index]
if value < lowest:
sum = sum + value
lowest = numList[0]
sum = 0","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
return 0
return (sum - lowest) / (len(numList) - 1)
if len(numList) == 0:
lowest = value
def getAverageDropLowest(numList):
value = numList[index]
if value < lowest:
sum = sum + value
lowest = numList[0]
sum = 0
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
return 0
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
def getAverageDropLowest(numList):
lowest = value
if value < lowest:
sum = sum + value
lowest = numList[0]","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
return 0
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
def getAverageDropLowest(numList):
lowest = value
if value < lowest:
sum = sum + value
lowest = numList[0]
# Solution
","def getAverageDropLowest(numList):
    if len(numList) == 0:
        return 0
    lowest = numList[0]
    sum = 0
    for index in range(len(numList)):
        value = numList[index]
        if value < lowest:
            lowest = value
        sum = sum + value
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"for index in range(len(numList)):
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
lowest = numList[0]
def getAverageDropLowest(numList):
lowest = value
sum = sum + value
if value < lowest:
return 0","# Problem description
Put the code in order to return the average of the values in a list and protect against divide by zero error.
# Scrambled lines
for index in range(len(numList)):
sum = 0
if len(numList) == 0:
return (sum - lowest) / (len(numList) - 1)
value = numList[index]
lowest = numList[0]
def getAverageDropLowest(numList):
lowest = value
sum = sum + value
if value < lowest:
return 0
# Solution
","def getAverageDropLowest(numList):
    sum = 0
    lowest = numList[0]
    for index in range(len(numList)):
        value = numList[index]
        sum = sum + value
        if value < lowest:
            lowest = value
    if len(numList) == 0:
        return 0
    return (sum - lowest) / (len(numList) - 1)
 
",Ericson2022figure8
,False,"def check_guess(guess,target):
def check_guess(guess,target:
return ""too low'
elif guess == target:
return 'correct'
return 'too high'
return 'correct
return 'too low'
if guess < target:
else:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
def check_guess(guess,target:
return ""too low'
elif guess == target:
return 'correct'
return 'too high'
return 'correct
return 'too low'
if guess < target:
else:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
else:
if guess < target:
return 'too low'
elif guess == target:
return ""too low'
return 'too high'
return 'correct'
def check_guess(guess,target:
return 'correct","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
else:
if guess < target:
return 'too low'
elif guess == target:
return ""too low'
return 'too high'
return 'correct'
def check_guess(guess,target:
return 'correct
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
if guess < target:
def check_guess(guess,target:
return 'too high'
return 'correct'
return ""too low'
return 'correct
else:
return 'too low'
elif guess == target:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
if guess < target:
def check_guess(guess,target:
return 'too high'
return 'correct'
return ""too low'
return 'correct
else:
return 'too low'
elif guess == target:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
if guess < target:
elif guess == target:
return 'correct
return 'correct'
else:
return 'too low'
return ""too low'
def check_guess(guess,target:
return 'too high'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
if guess < target:
elif guess == target:
return 'correct
return 'correct'
else:
return 'too low'
return ""too low'
def check_guess(guess,target:
return 'too high'
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return ""too low'
elif guess == target:
def check_guess(guess,target:
return 'correct
if guess < target:
return 'correct'
else:
return 'too low'
return 'too high'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return ""too low'
elif guess == target:
def check_guess(guess,target:
return 'correct
if guess < target:
return 'correct'
else:
return 'too low'
return 'too high'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return ""too low'
return 'correct'
return 'too low'
if guess < target:
def check_guess(guess,target:
elif guess == target:
else:
return 'correct
return 'too high'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return ""too low'
return 'correct'
return 'too low'
if guess < target:
def check_guess(guess,target:
elif guess == target:
else:
return 'correct
return 'too high'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'correct
return ""too low'
def check_guess(guess,target:
if guess < target:
return 'too high'
return 'too low'
return 'correct'
elif guess == target:
else:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'correct
return ""too low'
def check_guess(guess,target:
if guess < target:
return 'too high'
return 'too low'
return 'correct'
elif guess == target:
else:
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'correct
return 'too low'
return ""too low'
return 'correct'
elif guess == target:
return 'too high'
if guess < target:
else:
def check_guess(guess,target:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'correct
return 'too low'
return ""too low'
return 'correct'
elif guess == target:
return 'too high'
if guess < target:
else:
def check_guess(guess,target:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'correct'
def check_guess(guess,target:
return ""too low'
if guess < target:
else:
return 'too high'
return 'too low'
return 'correct
elif guess == target:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'correct'
def check_guess(guess,target:
return ""too low'
if guess < target:
else:
return 'too high'
return 'too low'
return 'correct
elif guess == target:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'too high'
def check_guess(guess,target:
return 'too low'
if guess < target:
else:
return 'correct
return 'correct'
elif guess == target:
return ""too low'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'too high'
def check_guess(guess,target:
return 'too low'
if guess < target:
else:
return 'correct
return 'correct'
elif guess == target:
return ""too low'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'too high'
return ""too low'
def check_guess(guess,target:
return 'correct
if guess < target:
elif guess == target:
return 'too low'
else:
return 'correct'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'too high'
return ""too low'
def check_guess(guess,target:
return 'correct
if guess < target:
elif guess == target:
return 'too low'
else:
return 'correct'
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target):
return 'too high'
return 'too low'
if guess < target:
else:
def check_guess(guess,target:
elif guess == target:
return ""too low'
return 'correct
return 'correct'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target):
return 'too high'
return 'too low'
if guess < target:
else:
def check_guess(guess,target:
elif guess == target:
return ""too low'
return 'correct
return 'correct'
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target:
def check_guess(guess,target):
return 'too low'
return 'correct
return ""too low'
return 'too high'
elif guess == target:
return 'correct'
else:
if guess < target:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target:
def check_guess(guess,target):
return 'too low'
return 'correct
return ""too low'
return 'too high'
elif guess == target:
return 'correct'
else:
if guess < target:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target:
if guess < target:
else:
return 'correct'
elif guess == target:
return 'too low'
return ""too low'
def check_guess(guess,target):
return 'too high'
return 'correct","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target:
if guess < target:
else:
return 'correct'
elif guess == target:
return 'too low'
return ""too low'
def check_guess(guess,target):
return 'too high'
return 'correct
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target:
return 'correct'
return 'correct
elif guess == target:
else:
return ""too low'
if guess < target:
return 'too low'
return 'too high'
def check_guess(guess,target):","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target:
return 'correct'
return 'correct
elif guess == target:
else:
return ""too low'
if guess < target:
return 'too low'
return 'too high'
def check_guess(guess,target):
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def check_guess(guess,target:
return 'too low'
if guess < target:
elif guess == target:
def check_guess(guess,target):
return 'correct
return 'correct'
return ""too low'
return 'too high'
else:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
def check_guess(guess,target:
return 'too low'
if guess < target:
elif guess == target:
def check_guess(guess,target):
return 'correct
return 'correct'
return ""too low'
return 'too high'
else:
# Solution
","def check_guess(guess,target):
if guess < target:
return 'too low'
elif guess == target:
return 'correct'
else:
return 'too high'
 
",Ericson2022figure2
,False,"elif guess == target:
def check_guess(guess,target):
else:
return 'too high'
return 'correct'
def check_guess(guess,target:
if guess < target:
return 'correct
return ""too low'
return 'too low'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
elif guess == target:
def check_guess(guess,target):
else:
return 'too high'
return 'correct'
def check_guess(guess,target:
if guess < target:
return 'correct
return ""too low'
return 'too low'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"elif guess == target:
def check_guess(guess,target):
if guess < target:
return 'correct
return 'too high'
return 'correct'
return 'too low'
return ""too low'
else:
def check_guess(guess,target:","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
elif guess == target:
def check_guess(guess,target):
if guess < target:
return 'correct
return 'too high'
return 'correct'
return 'too low'
return ""too low'
else:
def check_guess(guess,target:
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"elif guess == target:
def check_guess(guess,target):
return 'correct'
return ""too low'
def check_guess(guess,target:
if guess < target:
return 'too high'
else:
return 'correct
return 'too low'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
elif guess == target:
def check_guess(guess,target):
return 'correct'
return ""too low'
def check_guess(guess,target:
if guess < target:
return 'too high'
else:
return 'correct
return 'too low'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"elif guess == target:
else:
if guess < target:
def check_guess(guess,target:
return 'too low'
def check_guess(guess,target):
return 'correct'
return ""too low'
return 'correct
return 'too high'","# Problem description
Finish the function below to return 'too low' if the guess is less than the passed target, 'correct' if they are equal, and 'too high' if the guess is greater than the passed target. For example, check_guess(5,7) returns 'too low', check_guess(7,7) returns 'correct', and check_guess(9,7) returns 'too high'. There are three extra blocks that are not needed in a correct solution
# Scrambled lines
elif guess == target:
else:
if guess < target:
def check_guess(guess,target:
return 'too low'
def check_guess(guess,target):
return 'correct'
return ""too low'
return 'correct
return 'too high'
# Solution
","def check_guess(guess,target):
    if guess < target:
        return 'too low'
    elif guess == target:
        return 'correct'
    else:
        return 'too high'
 
",Ericson2022figure2
,False,"def isLevel(elList, start, end):
min = max
return (max-min) <= 10
if value > max:
min = value
value = elList[index]
for index in range(start, end+1):
max = value
if value < min:
max = elList[start]","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
def isLevel(elList, start, end):
min = max
return (max-min) <= 10
if value > max:
min = value
value = elList[index]
for index in range(start, end+1):
max = value
if value < min:
max = elList[start]
# Solution
","def isLevel(elList, start, end):
min = elList[start]
max = elList[start]
for index in range(start, end+1):
value = elList[index]
if value > max:
max = value
if value < min:
min = value
return (max-min) <= 10
",Ericson2018figure5
,False,"def isLevel(elList, start, end):
return (max-min) <= 10
value = elList[index]
if value > max:
if value < min:
max = value
min = max
max = elList[start]
for index in range(start, end+1):
min = value","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
def isLevel(elList, start, end):
return (max-min) <= 10
value = elList[index]
if value > max:
if value < min:
max = value
min = max
max = elList[start]
for index in range(start, end+1):
min = value
# Solution
","def isLevel(elList, start, end):
    max = elList[start]
    min = max
    for index in range(start, end+1):
        value = elList[index]
        if value > max:
            max = value
        if value < min:
            min = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"def isLevel(elList, start, end):
value = elList[index]
max = value
return (max-min) <= 10
for index in range(start, end+1):
max = elList[start]
if value < min:
min = value
if value > max:
min = max","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
def isLevel(elList, start, end):
value = elList[index]
max = value
return (max-min) <= 10
for index in range(start, end+1):
max = elList[start]
if value < min:
min = value
if value > max:
min = max
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value < min:
min = value
if value > max:
max = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
def isLevel(elList, start, end):
if value < min:
value = elList[index]
if value > max:
min = value
max = elList[start]
min = max
return (max-min) <= 10
max = value","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
def isLevel(elList, start, end):
if value < min:
value = elList[index]
if value > max:
min = value
max = elList[start]
min = max
return (max-min) <= 10
max = value
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value < min:
min = value
if value > max:
max = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
def isLevel(elList, start, end):
max = elList[start]
min = max
max = value
return (max-min) <= 10
if value < min:
if value > max:
value = elList[index]
min = value","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
def isLevel(elList, start, end):
max = elList[start]
min = max
max = value
return (max-min) <= 10
if value < min:
if value > max:
value = elList[index]
min = value
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value > max:
max = value
if value < min:
min = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
def isLevel(elList, start, end):
min = value
max = elList[start]
if value < min:
min = max
if value > max:
value = elList[index]
max = value
return (max-min) <= 10","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
def isLevel(elList, start, end):
min = value
max = elList[start]
if value < min:
min = max
if value > max:
value = elList[index]
max = value
return (max-min) <= 10
# Solution
","def isLevel(elList, start, end):
    min = elList[start]
    max = elList[start]
    for index in range(start, end+1):
        value = elList[index]
        if value < min:
            min = value
        if value > max:
            max = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
def isLevel(elList, start, end):
value = elList[index]
min = value
max = value
min = max
if value > max:
return (max-min) <= 10
max = elList[start]
if value < min:","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
def isLevel(elList, start, end):
value = elList[index]
min = value
max = value
min = max
if value > max:
return (max-min) <= 10
max = elList[start]
if value < min:
# Solution
","def isLevel(elList, start, end):
    min = elList[start]
    max = elList[start]
    for index in range(start, end+1):
        value = elList[index]
        if value > max:
            max = value
        if value < min:
            min = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
if value < min:
min = max
max = value
min = value
def isLevel(elList, start, end):
max = elList[start]
return (max-min) <= 10
value = elList[index]
if value > max:","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
if value < min:
min = max
max = value
min = value
def isLevel(elList, start, end):
max = elList[start]
return (max-min) <= 10
value = elList[index]
if value > max:
# Solution
",,Ericson2018figure5
,False,"for index in range(start, end+1):
if value < min:
value = elList[index]
if value > max:
min = max
max = value
def isLevel(elList, start, end):
min = value
max = elList[start]
return (max-min) <= 10","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
if value < min:
value = elList[index]
if value > max:
min = max
max = value
def isLevel(elList, start, end):
min = value
max = elList[start]
return (max-min) <= 10
# Solution
","def isLevel(elList, start, end):
min = elList[start]
max = elList[start]
for index in range(start, end+1):
value = elList[index]
if value < min:
min = value
if value > max:
max = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
if value > max:
return (max-min) <= 10
min = value
def isLevel(elList, start, end):
max = value
min = max
value = elList[index]
if value < min:
max = elList[start]","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
if value > max:
return (max-min) <= 10
min = value
def isLevel(elList, start, end):
max = value
min = max
value = elList[index]
if value < min:
max = elList[start]
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value > max:
max = value
if value < min:
min = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
max = value
if value < min:
min = max
def isLevel(elList, start, end):
min = value
value = elList[index]
max = elList[start]
return (max-min) <= 10
if value > max:","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
max = value
if value < min:
min = max
def isLevel(elList, start, end):
min = value
value = elList[index]
max = elList[start]
return (max-min) <= 10
if value > max:
# Solution
","
",Ericson2018figure5
,False,"for index in range(start, end+1):
max = value
if value > max:
min = max
min = value
max = elList[start]
return (max-min) <= 10
def isLevel(elList, start, end):
if value < min:
value = elList[index]","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
max = value
if value > max:
min = max
min = value
max = elList[start]
return (max-min) <= 10
def isLevel(elList, start, end):
if value < min:
value = elList[index]
# Solution
","def isLevel(elList, start, end):
    max = elList[start]
    min = max
    for index in range(start, end+1):
        value = elList[index]
        if value > max:
            max = value
        if value < min:
            min = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
max = value
value = elList[index]
if value > max:
def isLevel(elList, start, end):
if value < min:
min = max
max = elList[start]
return (max-min) <= 10
min = value","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
max = value
value = elList[index]
if value > max:
def isLevel(elList, start, end):
if value < min:
min = max
max = elList[start]
return (max-min) <= 10
min = value
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value > max:
max = value
if value < min:
min = value
return (max-min) <= 10
",Ericson2018figure5
,False,"for index in range(start, end+1):
min = value
def isLevel(elList, start, end):
if value < min:
max = value
min = max
value = elList[index]
max = elList[start]
if value > max:
return (max-min) <= 10","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
for index in range(start, end+1):
min = value
def isLevel(elList, start, end):
if value < min:
max = value
min = max
value = elList[index]
max = elList[start]
if value > max:
return (max-min) <= 10
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value < min:
min = value
if value > max:
max = value
return (max-min) <= 10
",Ericson2018figure5
,False,"if value < min:
def isLevel(elList, start, end):
if value > max:
max = value
min = value
value = elList[index]
for index in range(start, end+1):
return (max-min) <= 10
max = elList[start]
min = max","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
def isLevel(elList, start, end):
if value > max:
max = value
min = value
value = elList[index]
for index in range(start, end+1):
return (max-min) <= 10
max = elList[start]
min = max
# Solution
","def isLevel(elList, start, end):
    max = elList[start]
    min = max
    for index in range(start, end+1):
        value = elList[index]
        if value < min:
            min = value
        if value > max:
            max = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"if value < min:
def isLevel(elList, start, end):
min = max
return (max-min) <= 10
if value > max:
max = elList[start]
min = value
value = elList[index]
max = value
for index in range(start, end+1):","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
def isLevel(elList, start, end):
min = max
return (max-min) <= 10
if value > max:
max = elList[start]
min = value
value = elList[index]
max = value
for index in range(start, end+1):
# Solution
","def isLevel(elList, start, end):
    max = elList[start]
    min = elList[start]
    for index in range(start, end+1):
        value = elList[index]
        if value > max:
            max = value
        if value < min:
            min = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"if value < min:
for index in range(start, end+1):
max = value
max = elList[start]
def isLevel(elList, start, end):
value = elList[index]
if value > max:
return (max-min) <= 10
min = value
min = max","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
for index in range(start, end+1):
max = value
max = elList[start]
def isLevel(elList, start, end):
value = elList[index]
if value > max:
return (max-min) <= 10
min = value
min = max
# Solution
","def isLevel(elList, start, end):
    min = elList[start]
    max = elList[start]
    for index in range(start, end+1):
        value = elList[index]
        if value < min:
            min = value
        if value > max:
            max = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"if value < min:
if value > max:
def isLevel(elList, start, end):
min = value
for index in range(start, end+1):
min = max
max = elList[start]
max = value
value = elList[index]
return (max-min) <= 10","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
if value > max:
def isLevel(elList, start, end):
min = value
for index in range(start, end+1):
min = max
max = elList[start]
max = value
value = elList[index]
return (max-min) <= 10
# Solution
","def isLevel(elList, start, end):
    min = elList[start]
    max = elList[start]
    for index in range(start, end+1):
        value = elList[index]
        if value < min:
            min = value
        if value > max:
            max = value
    return (max-min) <= 10
",Ericson2018figure5
,False,"if value < min:
if value > max:
min = max
max = value
min = value
def isLevel(elList, start, end):
return (max-min) <= 10
value = elList[index]
for index in range(start, end+1):
max = elList[start]","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
if value > max:
min = max
max = value
min = value
def isLevel(elList, start, end):
return (max-min) <= 10
value = elList[index]
for index in range(start, end+1):
max = elList[start]
# Solution
","min = elList[start]
",Ericson2018figure5
,False,"if value < min:
max = elList[start]
if value > max:
def isLevel(elList, start, end):
max = value
value = elList[index]
for index in range(start, end+1):
min = max
min = value
return (max-min) <= 10","# Problem description
write a function to return true if the difference between the maximum and minimum value between a given start and end index (inclusive) was 10 or less.
# Scrambled lines
if value < min:
max = elList[start]
if value > max:
def isLevel(elList, start, end):
max = value
value = elList[index]
for index in range(start, end+1):
min = max
min = value
return (max-min) <= 10
# Solution
","def isLevel(elList, start, end):
max = elList[start]
min = max
for index in range(start, end+1):
value = elList[index]
if value < min:
min = value
if value > max:
max = value
return (max-min) <= 10
",Ericson2018figure5
,False,"def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return 'All odd'
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return 'All odd'
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
return 'All odd'
if li[index] % 2 == 0:
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
return 'All odd'
if li[index] % 2 == 0:
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
 
",Weinmann2021figure1
,False,"def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
return 'All odd'
return lambda x: x + li[index]
if li[index] % 2 == 0:","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
for index in range(len(li)-1, -1, -1):
return 'All odd'
return lambda x: x + li[index]
if li[index] % 2 == 0:
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return 'All odd'
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return 'All odd'
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
 
",Weinmann2021figure1
,False,"def last_even_adder(li):
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
return 'All odd'","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
return 'All odd'
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
if li[index] % 2 == 0:
return 'All odd'
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
if li[index] % 2 == 0:
return 'All odd'
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
return 'All odd'","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
return 'All odd'
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
return 'All odd'
for index in range(len(li)-1, -1, -1):","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
return 'All odd'
for index in range(len(li)-1, -1, -1):
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
 
",Weinmann2021figure1
,False,"def last_even_adder(li):
return 'All odd'
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return 'All odd'
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return 'All odd'
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
if li[index] % 2 == 0:","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return 'All odd'
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
if li[index] % 2 == 0:
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return 'All odd'
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return 'All odd'
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return 'All odd'
if li[index] % 2 == 0:
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return 'All odd'
if li[index] % 2 == 0:
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return 'All odd'
return lambda x: x + li[index]
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return 'All odd'
return lambda x: x + li[index]
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return 'All odd'","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
return 'All odd'
# Solution
","def last_even_adder(li):
    def adder(x):
        for index in range(len(li)-1, -1, -1):
            if li[index] % 2 == 0:
                return x + li[index]
        return 'All odd'
    return adder
",Weinmann2021figure1
,False,"def last_even_adder(li):
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
return 'All odd'
if li[index] % 2 == 0:","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return lambda x: x + li[index]
for index in range(len(li)-1, -1, -1):
return 'All odd'
if li[index] % 2 == 0:
# Solution
","def last_even_adder(li):
    def adder(x):
        for index in range(len(li)-1, -1, -1):
            if li[index] % 2 == 0:
                return x + li[index]
        return 'All odd'
    return adder
",Weinmann2021figure1
,False,"def last_even_adder(li):
return lambda x: x + li[index]
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return 'All odd'","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return lambda x: x + li[index]
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
return 'All odd'
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"def last_even_adder(li):
return lambda x: x + li[index]
return 'All odd'
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return lambda x: x + li[index]
return 'All odd'
for index in range(len(li)-1, -1, -1):
if li[index] % 2 == 0:
# Solution
","def last_even_adder(li):
    def adder(x):
        for index in range(len(li)-1, -1, -1):
            if li[index] % 2 == 0:
                return x + li[index]
        return 'All odd'
    return adder
",Weinmann2021figure1
,False,"def last_even_adder(li):
return lambda x: x + li[index]
return 'All odd'
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
def last_even_adder(li):
return lambda x: x + li[index]
return 'All odd'
if li[index] % 2 == 0:
for index in range(len(li)-1, -1, -1):
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"for index in range(len(li)-1, -1, -1):
def last_even_adder(li):
if li[index] % 2 == 0:
return 'All odd'
return lambda x: x + li[index]","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
for index in range(len(li)-1, -1, -1):
def last_even_adder(li):
if li[index] % 2 == 0:
return 'All odd'
return lambda x: x + li[index]
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"for index in range(len(li)-1, -1, -1):
def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
return 'All odd'","# Problem description
Write a function to return a function which takes an argument x and adds it to the last even element in the given list.
# Scrambled lines
for index in range(len(li)-1, -1, -1):
def last_even_adder(li):
if li[index] % 2 == 0:
return lambda x: x + li[index]
return 'All odd'
# Solution
","def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'
",Weinmann2021figure1
,False,"count = 0
count = count + 1
for index in range(start, end+1):
if current == target:
def countInRange(target, start, end, numList):
return count
current = numList[index]","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
count = count + 1
for index in range(start, end+1):
if current == target:
def countInRange(target, start, end, numList):
return count
current = numList[index]
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
count = count + 1
return count
def countInRange(target, start, end, numList):
if current == target:
current = numList[index]
for index in range(start, end+1):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
count = count + 1
return count
def countInRange(target, start, end, numList):
if current == target:
current = numList[index]
for index in range(start, end+1):
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
current = numList[index]
def countInRange(target, start, end, numList):
count = count + 1
if current == target:
return count
for index in range(start, end+1):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
current = numList[index]
def countInRange(target, start, end, numList):
count = count + 1
if current == target:
return count
for index in range(start, end+1):
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = 0
current = numList[index]
for index in range(start, end+1):
if current == target:
def countInRange(target, start, end, numList):
return count
count = count + 1","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
current = numList[index]
for index in range(start, end+1):
if current == target:
def countInRange(target, start, end, numList):
return count
count = count + 1
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):
for index in range(start, end+1):
count = count + 1
return count","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):
for index in range(start, end+1):
count = count + 1
return count
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = 0
for index in range(start, end+1):
count = count + 1
return count
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
for index in range(start, end+1):
count = count + 1
return count
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
for index in range(start, end+1):
if current == target:
count = count + 1
def countInRange(target, start, end, numList):
current = numList[index]
return count","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
for index in range(start, end+1):
if current == target:
count = count + 1
def countInRange(target, start, end, numList):
current = numList[index]
return count
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
for index in range(start, end+1):
if current == target:
count = count + 1
return count
def countInRange(target, start, end, numList):
current = numList[index]","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
for index in range(start, end+1):
if current == target:
count = count + 1
return count
def countInRange(target, start, end, numList):
current = numList[index]
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
for index in range(start, end+1):
return count
current = numList[index]
if current == target:
count = count + 1
def countInRange(target, start, end, numList):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
for index in range(start, end+1):
return count
current = numList[index]
if current == target:
count = count + 1
def countInRange(target, start, end, numList):
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
",Haynes_Magyar2022figure4
,False,"count = 0
if current == target:
for index in range(start, end+1):
return count
def countInRange(target, start, end, numList):
current = numList[index]
count = count + 1","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
if current == target:
for index in range(start, end+1):
return count
def countInRange(target, start, end, numList):
current = numList[index]
count = count + 1
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = 0
if current == target:
return count
count = count + 1
def countInRange(target, start, end, numList):
for index in range(start, end+1):
current = numList[index]","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
if current == target:
return count
count = count + 1
def countInRange(target, start, end, numList):
for index in range(start, end+1):
current = numList[index]
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = 0
return count
for index in range(start, end+1):
count = count + 1
def countInRange(target, start, end, numList):
current = numList[index]
if current == target:","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
return count
for index in range(start, end+1):
count = count + 1
def countInRange(target, start, end, numList):
current = numList[index]
if current == target:
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = 0
return count
if current == target:
count = count + 1
for index in range(start, end+1):
def countInRange(target, start, end, numList):
current = numList[index]","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
return count
if current == target:
count = count + 1
for index in range(start, end+1):
def countInRange(target, start, end, numList):
current = numList[index]
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = 0
return count
if current == target:
def countInRange(target, start, end, numList):
for index in range(start, end+1):
count = count + 1
current = numList[index]","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = 0
return count
if current == target:
def countInRange(target, start, end, numList):
for index in range(start, end+1):
count = count + 1
current = numList[index]
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = count + 1
current = numList[index]
count = 0
for index in range(start, end+1):
return count
if current == target:
def countInRange(target, start, end, numList):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
current = numList[index]
count = 0
for index in range(start, end+1):
return count
if current == target:
def countInRange(target, start, end, numList):
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = count + 1
current = numList[index]
if current == target:
count = 0
def countInRange(target, start, end, numList):
for index in range(start, end+1):
return count","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
current = numList[index]
if current == target:
count = 0
def countInRange(target, start, end, numList):
for index in range(start, end+1):
return count
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = count + 1
for index in range(start, end+1):
current = numList[index]
return count
def countInRange(target, start, end, numList):
if current == target:
count = 0","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
for index in range(start, end+1):
current = numList[index]
return count
def countInRange(target, start, end, numList):
if current == target:
count = 0
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"count = count + 1
for index in range(start, end+1):
return count
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):
count = 0","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
for index in range(start, end+1):
return count
current = numList[index]
if current == target:
def countInRange(target, start, end, numList):
count = 0
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = count + 1
return count
for index in range(start, end+1):
count = 0
current = numList[index]
def countInRange(target, start, end, numList):
if current == target:","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
return count
for index in range(start, end+1):
count = 0
current = numList[index]
def countInRange(target, start, end, numList):
if current == target:
# Solution
","def countInRange(target, start, end, numList):
count = 0
for index in range(start, end+1):
current = numList[index]
if current == target:
count = count + 1
return count
",Haynes_Magyar2022figure4
,False,"count = count + 1
return count
for index in range(start, end+1):
current = numList[index]
if current == target:
count = 0
def countInRange(target, start, end, numList):","# Problem description
Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
# Scrambled lines
count = count + 1
return count
for index in range(start, end+1):
current = numList[index]
if current == target:
count = 0
def countInRange(target, start, end, numList):
# Solution
","def countInRange(target, start, end, numList):
    count = 0
    for index in range(start, end+1):
        current = numList[index]
        if current == target:
            count = count + 1
    return count
 
",Haynes_Magyar2022figure4
,False,"def avgValuesInRange(numList, start, end):
for index in range(start,end+1):
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = sum + value
value = numList[index]
sum = 0
return 0","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
for index in range(start,end+1):
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = sum + value
value = numList[index]
sum = 0
return 0
# Solution
","def avgValuesInRange(numList, start, end):
sum = 0
for index in range(start,end+1):
value = numList[index]
sum = sum + value
if (end - start + 1) >= 1:
return sum / (end - start + 1)
return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
for index in range(start,end+1):
sum = 0
sum = sum + value
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)
value = numList[index]","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
for index in range(start,end+1):
sum = 0
sum = sum + value
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)
value = numList[index]
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
if (end - start + 1) >= 1:
for index in range(start,end+1):
return sum / (end - start + 1)
return 0
value = numList[index]
sum = sum + value
sum = 0","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
if (end - start + 1) >= 1:
for index in range(start,end+1):
return sum / (end - start + 1)
return 0
value = numList[index]
sum = sum + value
sum = 0
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
if (end - start + 1) >= 1:
sum = sum + value
sum = 0
value = numList[index]
return 0
for index in range(start,end+1):
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
if (end - start + 1) >= 1:
sum = sum + value
sum = 0
value = numList[index]
return 0
for index in range(start,end+1):
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
    sum = 0
    for index in range(start,end+1):
        value = numList[index]
        sum = sum + value
    if (end - start + 1) >= 1:
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return 0
sum = 0
sum = sum + value
return sum / (end - start + 1)
if (end - start + 1) >= 1:
value = numList[index]
for index in range(start,end+1):","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return 0
sum = 0
sum = sum + value
return sum / (end - start + 1)
if (end - start + 1) >= 1:
value = numList[index]
for index in range(start,end+1):
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return 0
value = numList[index]
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = 0
for index in range(start,end+1):
sum = sum + value","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return 0
value = numList[index]
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = 0
for index in range(start,end+1):
sum = sum + value
# Solution
","def avgValuesInRange(numList, start, end):
    sum = 0
    for index in range(start,end+1):
        value = numList[index]
        sum = sum + value
    if (end - start + 1) >= 1:
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return 0
value = numList[index]
sum = sum + value
sum = 0
for index in range(start,end+1):
return sum / (end - start + 1)
if (end - start + 1) >= 1:","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return 0
value = numList[index]
sum = sum + value
sum = 0
for index in range(start,end+1):
return sum / (end - start + 1)
if (end - start + 1) >= 1:
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
return 0
for index in range(start,end+1):
sum = sum + value
if (end - start + 1) >= 1:
sum = 0
value = numList[index]","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
return 0
for index in range(start,end+1):
sum = sum + value
if (end - start + 1) >= 1:
sum = 0
value = numList[index]
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
return 0
if (end - start + 1) >= 1:
value = numList[index]
for index in range(start,end+1):
sum = 0
sum = sum + value","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
return 0
if (end - start + 1) >= 1:
value = numList[index]
for index in range(start,end+1):
sum = 0
sum = sum + value
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
sum = sum + value
return 0
for index in range(start,end+1):
value = numList[index]
if (end - start + 1) >= 1:
sum = 0","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
return sum / (end - start + 1)
sum = sum + value
return 0
for index in range(start,end+1):
value = numList[index]
if (end - start + 1) >= 1:
sum = 0
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
sum = 0
return 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
sum = sum + value
return sum / (end - start + 1)
value = numList[index]","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
sum = 0
return 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
sum = sum + value
return sum / (end - start + 1)
value = numList[index]
# Solution
","def avgValuesInRange(numList, start, end):
sum = 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
sum = sum + value
for index in range(start,end+1):
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = 0
value = numList[index]","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
sum = sum + value
for index in range(start,end+1):
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)
sum = 0
value = numList[index]
# Solution
","def avgValuesInRange(numList, start, end):
sum = 0
for index in range(start,end+1):
value = numList[index]
sum = sum + value
if (end - start + 1) >= 1:
return sum / (end - start + 1)
return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
sum = sum + value
for index in range(start,end+1):
value = numList[index]
return 0
return sum / (end - start + 1)
if (end - start + 1) >= 1:
sum = 0","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
sum = sum + value
for index in range(start,end+1):
value = numList[index]
return 0
return sum / (end - start + 1)
if (end - start + 1) >= 1:
sum = 0
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
sum = sum + value
sum = 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
value = numList[index]
return 0
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
sum = sum + value
sum = 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
value = numList[index]
return 0
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
sum = 0
if (end - start + 1) >= 1:
for index in range(start,end+1):
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
value = numList[index]
sum = 0
for index in range(start,end+1):
if (end - start + 1) >= 1:
return 0
sum = sum + value
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
value = numList[index]
sum = 0
for index in range(start,end+1):
if (end - start + 1) >= 1:
return 0
sum = sum + value
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
if (end - start + 1) >= 1:
sum = 0
for index in range(start,end+1):
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
value = numList[index]
sum = 0
return sum / (end - start + 1)
sum = sum + value
if (end - start + 1) >= 1:
return 0
for index in range(start,end+1):","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
value = numList[index]
sum = 0
return sum / (end - start + 1)
sum = sum + value
if (end - start + 1) >= 1:
return 0
for index in range(start,end+1):
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"def avgValuesInRange(numList, start, end):
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
if (end - start + 1) >= 1:
return 0
sum = 0
for index in range(start,end+1):","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
def avgValuesInRange(numList, start, end):
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
if (end - start + 1) >= 1:
return 0
sum = 0
for index in range(start,end+1):
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
return 0
sum = 0
if (end - start + 1) >= 1:
value = numList[index]
sum = sum + value
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
return 0
sum = 0
if (end - start + 1) >= 1:
value = numList[index]
sum = sum + value
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
    sum = 0
    if (end - start + 1) >= 1:
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
sum = 0
sum = sum + value
value = numList[index]
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
sum = 0
sum = sum + value
value = numList[index]
return 0
if (end - start + 1) >= 1:
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
    sum = 0
    for index in range(start,end+1):
        value = numList[index]
        sum = sum + value
    if (end - start + 1) >= 1:
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
,False,"for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
value = numList[index]
return 0
if (end - start + 1) >= 1:
sum = 0
sum = sum + value
return sum / (end - start + 1)","# Problem description
write a function to return the average of values in a list, given a start and end index, for example avgValuesInRange([1,2,3,4,5],0,2) is 2.0 and avgValuesInRange([1,2,3,4,5],2,4) is 4.0
# Scrambled lines
for index in range(start,end+1):
def avgValuesInRange(numList, start, end):
value = numList[index]
return 0
if (end - start + 1) >= 1:
sum = 0
sum = sum + value
return sum / (end - start + 1)
# Solution
","def avgValuesInRange(numList, start, end):
    if (end - start + 1) >= 1:
        sum = 0
        for index in range(start,end+1):
            value = numList[index]
            sum = sum + value
        return sum / (end - start + 1)
    else:
        return 0
",Ericson2017figure4
