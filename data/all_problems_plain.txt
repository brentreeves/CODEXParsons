# static worst 3 begin

1. Karavirta2012Figure3.py
def findmax(alist):
	if len(alist) > 0:
		curmax=alist[0]
		for item in alist:
			if item > curmax:
				curmax=item

	return curmax


#
# from paper:
#
Karavirta2012Figure3.py
def findmax(alist):
        curmax = None
	if len(alist) > 0:
		curmax=alist[0]
		for item in alist:
			if item > curmax:
				curmax=item
	return curmax

def findmax(alist):
    curmax = alist[0]
    for item in alist:
    	if item > curmax:
	   curmax = item
    return curmax
# bnr end    
 

2. Ericson2017figure1.py
def getSum(numList):
	sum = 0
	for num in numList:
		sum = sum + num
		return sum

 
3. Ericson2018figure5.py
def isLevel(elList, start, end):
	max = elList[start]
	min = max
	for index in range(start, end+1):
		value = elList[index]
		if value > max:
			max = value
		if value < min:
			min = value
	return (max-min) <= 10

# static worst 3 end

#static best 3 start

problems/Ericson2022figure3.py
class Person:
Class Person:
	def __init__(self, first, last):
	def __init__(first, last):
		self.first = first
		self.last = last
	def __str__(self):
		return (self.first + " " + self.last)
		return (self.first + self.last)
	def initials(self):
		return(self.first[0] + self.last[0])
		return(self.first[1] + self.last[1])

problems/Weinmann2021figure1.py
def last_even_adder(li):
    for index in range(len(li)-1, -1, -1):
        if li[index] % 2 == 0:
            return lambda x: x + li[index]
    return 'All odd'


problems/Haynes_Magyar2022figure2.py
def has22(nums):
	for i in range (len(nums)-1):
		if nums[i] == 2 and nums [i+1] == 2:
			return True
	return False
 

#static best 3 end

problems/Ericson2017figure4.py
def avgValuesInRange(numList, start, end):
	sum = 0
	for index in range(start,end+1):
		value = numList[index]
		sum = sum + value
	if (end - start + 1) >= 1:
		return sum / (end - start + 1)
	return 0
 
 
problems/Ericson2022figure2.py
def check_guess(guess,target):
def check_guess(guess,target:
	if guess < target:
		return 'too low'
		return "too low'
	elif guess == target:
		return 'correct
		return 'correct'
	else:
		return 'too high'
 
 
problems/Ericson2022figure4.py
def alarm_clock(day, vacation):
def alarm_clock(day, vacation)
	if vacation:
		if day == 0 or day == 6:
		if day == 0 || day == 6:
			return 'off'
		else:
			return '10:00'
	else:
		if day == 0 or day == 6:
			return '10:00'
		else:
			return '7:00'
 
problems/Ericson2022figure8.py
# Put the code in order to return the average of the values in a list and protect against divide by zero error.
def getAverageDropLowest(numList):
	if len(numList) == 0:
		return 0
	sum = 0
	lowest = numList[0]
	for index in range(len(numList)):
		value = numList[index]
		sum = sum + value
		if value < lowest:
			lowest = value
	return (sum - lowest) / (len(numList) - 1)
 
problems/Haynes_Magyar2022figure4.py
# Finish the function to define countInRange that returns a count of the number of tines that a target value appears in a list between the start and end indices (inclusive). For example, countInRange(1,2,4,[1,2,1,1,1,1]) should return 3 since there are three 1s between index 2 and 4 inclusive.
def countInRange(target, start, end, numList):
	count = 0
	for index in range(start, end+1):
		current = numList[index]
		if current == target:
			count = count + 1
	return count
 
problems/Hou2022figure2.py
# Create the function, filter_strings(str_list), below to take a list of strings, str_list, and return a new list with all the strings from the passed list in the same order that have a length greater than 3. For example, filter_strings(["Run", "she", "said"]) should return ["said"] and filter _strings(["It", "was", "a", "dark", "night"]) should return ["dark", "night"]
def filter_strings(str_list):
	new_list = []
	for word in str_list:
		if len(word) > 3:
			new_list.append(word)
	return new_list
 

 
