import O

# Brent Reeves
# Winter '22
#

# Ericson2017figure1.txt
# def getSum(numlist):
#         sum = 0
#         for num in numList:
#                 sum = sum + num
#                 return sum

class Parsons_Ericson2017figure1(O.Parsons):

    def testit(self):
        # print("Ericson2017figure1:testit: ", self.dafile)
        
        return self.set_predicates_return([
            ("[] = 0", self.mf([]), 0),
            ("[0] = 0", self.mf([0]), 0),
            ("[0,0,0] = 0", self.mf([0,0,0]), 0 ),
            ("[-1] = -1", self.mf([-1]), -1 ),
            ("[1,0,-1,-1] = -1 ", self.mf([1, 0, -1, -1]), -1 ),
            ("[1,2,3,4] = 10 ", self.mf([1, 2, 3, 4]), 10),
            ("[-99,1,1,1,1,1] = 94 ", self.mf([-99, 1, 1, 1, 1, 1]), -94),
        ])


if __name__ == '__main__':
    p1 = Parsons_Ericson2017figure1("Ericson2017figure1", "getSum")
    p1.log(1, "Ericson2017figure1:testit: " + p1.dafile)
    rc = p1.go()
import O

# Ericson2017figure4.txt
# def avgValuesInRange(numList, start, end):
# 	sum = 0
# 	for index in range(start,end-1):
# 		value = numList[index]
# 		sum = sum + value
# 	if (end - start + 1) >= 1:
# 		return sum / (end - start + 1)
# 	return 0

#
# don't understand this... :-) but here are the results...
#

class Parsons_Ericson2017figure4(O.Parsons):

    def testit(self):
        # print("Ericson2017figure4:testit: ", self.dafile)
        return self.set_predicates_return([
            ( "[1,2,3],0,1) = 0.0", self.mf([1,2,3],0,1),  1.5),
            # ( "[1],0,1) = 0.0", self.mf([1],0,1),  0.0),
            ( "[1],0,2) = 0.333", self.mf([1],0,2),  0.33333),
        #     ( "[1],1,1) = 0.0 ", self.mf([1],1,1),  0.0 ),
        #     ( "[1],1,2) = 0.0 ", self.mf([1],1,2),  0.0 ),
        #     ( "[1,1],0,0) = 0.0 ", self.mf([1,1],0,0),  0.0 ),
        #     ( "[1,1],0,1) = 0.0 ", self.mf([1,1],0,1),  0.0 ),
        #     ( "[1,1],0,2) = 0.333 ", self.mf([1,1],0,2),  0.33333 ),
        #     ( "[1,1],1,1) = 0.0 ", self.mf([1,1],1,1),  0.0 ),
        #     ( "[1,1],1,2) = 0.0 ", self.mf([1,1],1,2),  0.0 ),
        #     ( "[1,1],1,3) = 0.333 ", self.mf([1,1],1,3),  0.33333 ),
        #     ( "[1,2,3],0,0) = 0.0 ", self.mf([1,2,3],0,0),  0.0 ),
        #     ( "[1,2,3],0,1) = 0.0 ", self.mf([1,2,3],0,1),  0.0 ),
        #     ( "[1,2,3],0,2) = 0.333 ", self.mf([1,2,3],0,2),  0.33333 ),
        #     ( "[1,2,3],0,3) = 0.75 ", self.mf([1,2,3],0,3),  0.75 ),
        #     ( "[1,2,3],0,4) = 1.2 ", self.mf([1,2,3],0,4),  1.2 ),
        #     ( "[-1,-2,-3,-4,-5],0,0) = 0.0 ", self.mf([-1,-2,-3,-4,-5],0,0),  0.0 ),
        #     ( "[-1,-2,-3,-4,-5],0,1) = 0.0 ", self.mf([-1,-2,-3,-4,-5],0,1),  0.0 ),
        #     ( "[-1,-2,-3,-4,-5],0,2) = -0.333 ", self.mf([-1,-2,-3,-4,-5],0,2),  -0.33333 ),
        #     ( "[-1,-2,-3,-4,-5],0,3) = -0.75 ", self.mf([-1,-2,-3,-4,-5],0,3),  -0.75 ),
        #     ( "[-1,-2,-3,-4,-5],0,4) = -1.2 ", self.mf([-1,-2,-3,-4,-5],0,4),  -1.2 ),
        ])


if __name__ == '__main__':
    p1 = Parsons_Ericson2017figure4("Ericson2017figure4", "avgValuesInRange")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Ericson2018figure5.txt
# def isLevel(elList, start, end):
# 	max = elList[start]
# 	min = max
# 	for index in range(start, end+1):
# 		value = elList[index]
# 		if value > max:
# 			max = value
# 		if value < min:
# 			min = value
# 	return (max-min) <= 10

class Parsons_Ericson2018figure5(O.Parsons):
    
    def testit(self):

        # print("Ericson2018figure5:testit: ", self.dafile)
        return self.set_predicates_return([
            # ("([1],0,0) = T", self.mf( [1],0,0 ), False),
            ("([1],0,0) = T", self.mf( [1],0,0 ), True),
            ("([1,1,1],0,0) =T", self.mf( [1,1,1],0,0)  , True),
            ("([1,1,99],0,0) =T", self.mf( [1,1,99],0,0)  , True),
            ("([1,1,1],0,1) =T", self.mf([1,1,1],0,1) , True),
            ("([1,1,99],0,1) =T", self.mf([1,1,99],0,1) , True),
            ("([1,1,99],0,2) =F", self.mf([1,1,99],0,2) , False),
            ("([1,1,9],0,2) =T", self.mf([1,1,9],0,2) , True),
            ("([1,1,1,9],0,2) =T", self.mf([1,1,1,9],0,2) , True),
            ("([1,1,1,1,9],0,2) =T", self.mf([1,1,1,1,9],0,2) , True),
            ("([1,1,1,1,9],0,3) =T", self.mf([1,1,1,1,9],0,3) , True),
            ("([1,1,1,1,9],0,4) =T", self.mf([1,1,1,1,9],0,4) , True),
            ("([1,1,1,1,10],0,4) =T", self.mf([1,1,1,1,10],0,4) , True),
            ("([1,1,1,1,11],0,4) =T", self.mf([1,1,1,1,11],0,4) , True),
            ("([1,1,1,1,12],0,4) =F", self.mf([1,1,1,1,12],0,4) , False),
            ("([1,1,1,1,-9],0,4) =T", self.mf([1,1,1,1,-9],0,4) , True),
            ("([1,1,1,1,-10],0,4) =F", self.mf([1,1,1,1,-10],0,4) , False),
            ("([0,3,6,9,12,15,18,21,24,27],0,1) :", self.mf([0,3,6,9,12,15,18,21,24,27],0,1) , True),
            ("([0,3,6,9,12,15,18,21,24,27],0,2) :", self.mf([0,3,6,9,12,15,18,21,24,27],0,2) , True),
            ("([0,3,6,9,12,15,18,21,24,27],0,3) :", self.mf([0,3,6,9,12,15,18,21,24,27],0,3) , True),
            ("([0,3,6,9,12,15,18,21,24,27],0,4) :", self.mf([0,3,6,9,12,15,18,21,24,27],0,4) , False),
            ("([0,3,6,9,12,15,18,21,24,27],1,5) :", self.mf([0,3,6,9,12,15,18,21,24,27],1,5) , False),
            ("([0,3,6,9,12,15,18,21,24,27],2.6) :", self.mf([0,3,6,9,12,15,18,21,24,27],2,6) , False),
            ("([0,3,6,9,12,15,18,21,24,27],2.6) :", self.mf([0,3,6,9,12,15,18,21,24,27],3,7) , False),
            ("([0,3,6,9,12,15,18,21,24,27],0,5) :", self.mf([0,3,6,9,12,15,18,21,24,27],0,5) , False),
        ])


if __name__ == '__main__':
    p1 = Parsons_Ericson2018figure5("Ericson2018figure5", "isLevel")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Ericson2022figure2.txt
# def check_guess(guess,target):
# 	if guess < target:
# 		return 'too low'
# 	elif guess == target:
# 		return 'correct'
# 	else:
# 		return 'too high'

# Ericson2022figure2_2 not indented
# Ericson2022figure2_11 not indented

class Parsons_Ericson2022figure2(O.Parsons):
    
    def testit(self):
        # print("Ericson2022figure2:testit: ", self.dafile)

        return self.set_predicates_return([
            # ( "(0,0) :", self.mf( 0,0 ) , 'too low', ), # blink test
            ( "(0,0) :", self.mf( 0,0 ) , 'correct', ),
            ( "(-1,-1) :", self.mf( -1,-1 ) , 'correct', ),
            ( "(-2,-2) :", self.mf( -2,-2 ) , 'correct', ),
            ( "(1,1) :", self.mf( 1,1 ) , 'correct', ),
            ( "(2,2) :", self.mf( 2,2 ) , 'correct', ),
            ( "(0,1) :", self.mf( 0,1 ) , 'too low', ),
            ( "(0.0,1.0) :", self.mf( 0.0,1.0 ) , 'too low', ),
            ( "(0,2) :", self.mf( 0,2 ) , 'too low', ),
            ( "(0,999) :", self.mf( 0,999 ) , 'too low', ),
            ( "(-1,0) :", self.mf( -1,0) , 'too low', ),
            ( "(-2,-1) :", self.mf( -2,-1 ) , 'too low', ),
            ( "(1,0) :", self.mf( 1,0 ) , 'too high', ),
            ( "(2,0) :", self.mf( 2,0 ) , 'too high', ),
            ( "(999,0) :", self.mf( 999,0 ) , 'too high', ),
            ( "(0,-1) :", self.mf( 0,-1) , 'too high', ),
            ( "(-1,-2) :", self.mf( -1,-2 ) , 'too high', ),
        ])


if __name__ == '__main__':
    p1 = Parsons_Ericson2022figure2("Ericson2022figure2", "check_guess")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Ericson2022figure3.txt
# class Person:
#         def __init__(self, first, last):
#             self.first = first
#             self.last = last
#
#         def __str__(self):
#             return (self.first + " " + self.last)
#    
#         def initials(self):
# 	      return(self.first[0] + self.last[0])


class Parsons_Ericson2022figure3(O.Parsons):

    def classy(self, jive):
        note, first, last, true_name, true_initials = jive
        # print('\nclassy: ', jive)
        daname = ''
        initials=''

        try:
            p1 = self.m.Person(first, last)

            initials = ''
            try:
                initials = p1.initials()
            except:
                print("ERROR initials()", file=sys.stderr)
                return {"msg": "Error initials() not happy", "ok": False, "actual": str(sys.exc_info()[1]) }

            if (initials != true_initials):
                return {"msg": note, "ok": False, "actual": initials, "expected": true_initials}

            daname = ''
            try:
                daname = str(p1)
            except:
                print("ERROR __str__()", file=sys.stderr)
                return {"msg": "Error __str__ not happy", "ok": False, "actual": str(sys.exc_info()[1]) }

            if (daname != true_name):
                return {"msg": note, "ok": False, "actual": daname, "expected": true_name}

            return {"msg": note, "ok": True, "actual": daname }
            
        except:
            # print("safely caught exception")
            ff = f'ERROR: File: {self.dafile}'
            ee = {"error" : ff, "exception" : str(sys.exc_info()[1])}
            print(ee, file=sys.stderr)

        return {"msg": note, "ok": False, "actual": "Could not make a Person", "expected": "class Person:..."}

    
    def testit(self):
        # print("Ericson2022figure3:testit: ", self.dafile)

        args = [
            # ("a b = 'ab' 'a b'", 'a','b','a b', 'zz'), # blink test
            ("a b = 'ab' 'a b'", 'a','b','a b', 'ab'),
            ("aa bb = 'ab'",'aa','bb','aa bb', 'ab'),
            ("aaa bbb = ab", 'aaa','bbb','aaa bbb', 'ab'),
            ("' spacea',' spaceb' = [  ] ", ' spacea',' spaceb',' spacea  spaceb', '  '),
            ("' spacesa ',' spacesb ' = ...", ' spacesa ',' spacesb ',' spacesa   spacesb ', '  '),
            ("'a z','b z' = ab", 'a z','b z','a z b z', 'ab'),
        ]
        self.predicates = list(map ( self.classy, args ))
        # print("preds: ", self.predicates)

        good = list(filter(lambda x:  x["ok"] == True, self.predicates ))
        bad = list(filter(lambda x:  x["ok"] == False, self.predicates ))

        return len(bad), good, bad


if __name__ == '__main__':
    p1 = Parsons_Ericson2022figure3("Ericson2022figure3", "Person")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Ericson2022figure4.txt
# def alarm_clock(day, vacation):
# 	if vacation:
# 		if day == 0 or day == 6:
# 			return 'off'
# 		else:
# 			return '10:00'
# 	else:
# 		if day == 0 or day == 6:
# 			return '10:00'
# 		else:
# 			return '7:00'

class Parsons_Ericson2022figure4(O.Parsons):
    
    def testit(self):
        # print("Ericson2022figure4:testit: ", self.dafile)

        return self.set_predicates_return([
            # ( "(0,True) :", self.mf( 0,True ), 'zzz'), # blink test
            ( "(0,True) :", self.mf( 0,True ), 'off'),
            ( "(1,True) :", self.mf( 1,True ), '10:00'),
            ( "(2,True) :", self.mf( 2,True ), '10:00'),
            ( "(3,True) :", self.mf( 3,True ), '10:00'),
            ( "(4,True) :", self.mf( 4,True ), '10:00'),
            ( "(5,True) :", self.mf( 5,True ), '10:00'),
            ( "(6,True) :", self.mf( 6,True ), 'off'),
            ( "(0,False) :", self.mf( 0,False ), '10:00'),
            ( "(1,False) :", self.mf( 1,False ), '7:00'),
            ( "(2,False) :", self.mf( 2,False ), '7:00'),
            ( "(3,False) :", self.mf( 3,False ), '7:00'),
            ( "(4,False) :", self.mf( 4,False ), '7:00'),
            ( "(5,False) :", self.mf( 5,False ), '7:00'),
            ( "(6,False) :", self.mf( 6,False ), '10:00'),
        ])


if __name__ == '__main__':
    p1 = Parsons_Ericson2022figure4("Ericson2022figure4", "alarm_clock")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Ericson2022figure8.txt
# def getAverageDropLowest(numList):
# 	if len(numList) == 0:
# 		return 0
# 	sum = 0
# 	lowest = numList[0]
# 	for index in range(len(numList)):
# 		value = numList[index]
# 		sum = sum + value
# 		if value < lowest:
# 			lowest = value
# 	return (sum - lowest) / (len(numList) - 1)

class Parsons_Ericson2022figure8(O.Parsons):
    
    def testit(self):
        # print("Ericson2022figure8:testit: ", self.dafile)

        self.predicates = [
            # self.expectN("[] = 0", self.mf, [], -1), # blink test
            self.expectN("[] = 0", self.mf, [], 0),
            self.expectN("[0,0] = 0.0", self.mf, [0,0], 0),
            self.expectN("[0,0,0] = 0.0", self.mf, [0,0,0], 0),
            self.expectN("[0,0,0,-1] = 0.0", self.mf, [0,0,0,-1], 0),
            self.expectN("[0,0,0,-3] = 0.0", self.mf, [0,0,0,-3], 0),
            self.expectN("[1,1,1,0] = 1.0", self.mf, [1,1,1,0], 1),
            self.expectN("[1,1,0,1] = 1.0", self.mf, [1,1,0,1], 1),
            self.expectN("[1,0,1,1] = 1.0", self.mf, [1,0,1,1], 1),
            self.expectN("[0,1,1,1] = 1.0", self.mf, [0,1,1,1], 1),
            
            self.expectN("[-9,-1,-3,-5] = -3", self.mf, [-9,-1,-3,-5], -3),
            self.expectN("[-1,-9,-3,-5] = -3", self.mf, [-1,-9,-3,-5], -3),
            self.expectN("[-1,-3,-9,-5] = -3", self.mf, [-1,-3,-9,-5], -3),
            self.expectN("[-1,-3,-5,-9] = -3", self.mf, [-1,-3,-5,-9], -3),
            
            self.expectN("[0,2,2,2] = 2", self.mf, [0,2,2,2], 2),
            self.expectN("[0,1,3,5] = 3", self.mf, [0,1,3,5], 3) 
         ]

        good = list(filter(lambda x:  x["ok"] == True, self.predicates ))
        bad = list(filter(lambda x:  x["ok"] == False, self.predicates ))

        return len(bad), good, bad


if __name__ == '__main__':
    p1 = Parsons_Ericson2022figure8("Ericson2022figure8", "getAverageDropLowest")
    rc = p1.go()
import O

# Brent Reeves
# Winter '22
#

# Haynes-Magyar2022figure2.txt
# def has22(nums):
# 	for i in range (len(numbs)-1):
# 		if nums[i] == 2 and num [i+1] == 2:
# 			return True
# 	return False

class Parsons_Haynes_Magyar2022figure2(O.Parsons):

    def testit(self):
        # print("Parsons_Haynes_Magyar2022figure2:testit: ", self.dafile)
        p1.log(1,"Parsons_Haynes_Magyar2022figure2:testit: " + self.dafile)
        # Haynes_Magyar2022figure2_0.py

        return self.set_predicates_return([
            # ( " [1] = False", self.mf([1]), True), # blink test
            ( " [1] = False", self.mf([1]), False),
            ( " [1,1] = False", self.mf([1,1]), False),
            ( " [1,1,1] = False", self.mf([1,1,1]), False),
            ( " [1,2,3,4] = False", self.mf([1,2,3,4]), False),
            ( " [1,2,1,2,1,2,1] = False", self.mf([1,2,1,2,1,2,1]), False),
            ( " [1,2,2,1,2,1] = True", self.mf([1,2,2,1,2,1]), True),
            ( " [2,2] = True", self.mf([2,2]), True),
            ( " [1,2,1,2,1,2,2] = True", self.mf([1,2,1,2,1,2,2]), True),
        ])


if __name__ == '__main__':
    p1 = Parsons_Haynes_Magyar2022figure2("Haynes_Magyar2022figure2", "has22")
    # p1.setLog(4)
    # p1.log(1,"Parsons_Haynes_Magyar2022figure2:main: ")
    rc = p1.go()
    # p1.setLog(0)
import O

# Brent Reeves
# Winter '22
#

# Haynes-Magyar2022figure4.txt
# def countInRange(target, start, end, numList):
# 	count = 0
# 	for index in range(start, end+1):
# 		current = numList[index]
# 		if current == target:
# 			count = count + 1
# 	return count

class Parsons_Haynes_Magyar2022figure4(O.Parsons):
    
    def testit(self):
        self.log(1, "Haynes_Magyar2022figure4:testit: " + self.dafile)

        return self.set_predicates_return([
            # ( '0,0,0,[0]=1', self.mf( 0,0,0,[0] ), 9), # blink test
            ( '0,0,0,[0]=1', self.mf( 0,0,0,[0] ), 1),
            ( '1,0,0,[0]=0', self.mf( 1,0,0,[0] ), 0),
            ( '0,0,1,[0,0]=2', self.mf( 0,0,1,[0,0] ), 2),
            ( '0,0,1,[0,0,0]=2', self.mf( 0,0,1,[0,0,0] ), 2),
            ( '0,0,1,[0,0,0,0]=2', self.mf( 0,0,1,[0,0,0,0] ), 2),
            ( '0,0,2,[0,0,0,0]=3', self.mf( 0,0,2,[0,0,0,0] ), 3),
            ( '0,0,3,[0,0,0,0]=4', self.mf( 0,0,3,[0,0,0,0] ), 4),
            ( '3,0,3,[1,2,3,1,2,3,1,2,3]=1', self.mf( 3,0,3,[1,2,3,1,2,3,1,2,3] ), 1),
            ( '3,0,6,[1,2,3,1,2,3,1,2,3]=2', self.mf( 3,0,6,[1,2,3,1,2,3,1,2,3] ), 2),
            ( '3,0,7,[1,2,3,1,2,3,1,2,3]=2', self.mf( 3,0,7,[1,2,3,1,2,3,1,2,3] ), 2),
            ( '3,0,8,[1,2,3,1,2,3,1,2,3]=3', self.mf( 3,0,8,[1,2,3,1,2,3,1,2,3] ), 3),
            ( '2,0,8,[1,2,3,1,2,3,1,2,3]=3', self.mf( 2,0,8,[1,2,3,1,2,3,1,2,3] ), 3),
            ( '1,0,8,[1,2,3,1,2,3,1,2,3]=3', self.mf( 1,0,8,[1,2,3,1,2,3,1,2,3] ), 3),
            ( '9,0,0,[9,9,9,9,9,9,9,9,9]=1', self.mf( 9,0,0,[9,9,9,9,9,9,9,9,9] ), 1),
            ( '9,0,1,[9,9,9,9,9,9,9,9,9]=2', self.mf( 9,0,1,[9,9,9,9,9,9,9,9,9] ), 2),
            ( '9,0,2,[9,9,9,9,9,9,9,9,9]=3', self.mf( 9,0,2,[9,9,9,9,9,9,9,9,9] ), 3),
            ( '9,0,3,[9,9,9,9,9,9,9,9,9]=4', self.mf( 9,0,3,[9,9,9,9,9,9,9,9,9] ), 4),
            ( '9,0,8,[9,9,9,9,9,9,9,9,9]=9', self.mf( 9,0,8,[9,9,9,9,9,9,9,9,9] ), 9),
            ( '9,8,8,[9,9,9,9,9,9,9,9,9]=1', self.mf( 9,8,8,[9,9,9,9,9,9,9,9,9] ), 1),
            ( '9,7,8,[9,9,9,9,9,9,9,9,9]=2', self.mf( 9,7,8,[9,9,9,9,9,9,9,9,9] ), 2),
            ( '9,4,5,[9,9,9,9,9,9,9,9,9]=2', self.mf( 9,4,5,[9,9,9,9,9,9,9,9,9] ), 2),
        ])


if __name__ == '__main__':
    p1 = Parsons_Haynes_Magyar2022figure4("Haynes_Magyar2022figure4", "countInRange")
    # p1.setLog(3)
    rc = p1.go()
    # p1.setLog(0)
import O

# Brent Reeves
# Winter '22
#

class Parsons_Hou2022figure2(O.Parsons):
    
# Hou2022figure2.txt
    # def filter_strings(str_list):
    # 	new_list = []
    # 	for word in str_list:
    # 		if len(word) > 3:
    # 			new_list.append(word)
    # 	return new_list

    def testit(self):
        # print("Hou2022figure2:testit: ", self.dafile)

        return self.set_predicates_return([
            # ( "[] = []", self.mf([]), ['a'] ), # blink test
            ( "[] = []", self.mf([]), [] ),
	    ( "[''] = [] ", self.mf(['']), []),
            ( "['a'] = [] ", self.mf(['a']), []),
            ( "['a', 'b'] = [] ", self.mf(['a', 'b']), []),
            ( "['aaa'] = [] ", self.mf(['aaa']), []),
            ( "['aaaa'] = ['aaaa'] ", self.mf(['aaaa']), ['aaaa']),
            ( "['aaaa', ''] = ['aaaa'] ",  self.mf(['aaaa', '']), ['aaaa']),
            ( "['aaaa', 'b'] = ['aaaa'] ",  self.mf(['aaaa', 'b']), ['aaaa']),
            ( "['aaaa', 'bbbb'] = ['aaaa', 'bbbb'] ", self.mf(['aaaa', 'bbbb']), ['aaaa', 'bbbb']),
            ( "['1','12','123','1234','12345','123456'] = ['1234','12345','123456'] ", self.mf(['1','12','123','1234','12345','123456']), ['1234','12345','123456']),
            ( "['123456','12345','1234','123','12','1'] = ['123456','12345','1234'] ", self.mf(['123456','12345','1234','123','12','1']), ['123456','12345','1234']),
        ])


if __name__ == '__main__':
    p1 = Parsons_Hou2022figure2("Hou2022figure2", "filter_strings")
    rc = p1.go()
    # class Parsons_Hou2022figure2(O.Parsons):
import O

# Brent Reeves
# Winter '22
#
    
#Karavirta2012Figure3.txt
# def findmax(alist):
# 	if len(alist) > 0:
# 		curmax=alist[0]
# 		for item in alist:
# 			if item > curmax:
# 				curmax=item
# 	return curmax

class Parsons_Karavirta2012Figure3(O.Parsons):

    def testit(self):
        # print("Karavirta2012Figure3:testit: ", self.dafile)

        return self.set_predicates_return([
            # ( "[]", self.mf([]), 999999), # blink test
            ( "[]", self.mf([]), None),
            ( "[-9]", self.mf([-9]), -9),
            ( "[-9,-8]", self.mf([-9,-8]), -8),
            ( "[-9,-8,-10]", self.mf([-9,-8,-10]), -8),
            ( "[1,2,3]", self.mf([1,2,3]), 3),
            ( "[3,2,1]", self.mf([3,2,1]), 3),
            ( "[-9,-8,-7,3,2,1]", self.mf([-9,-8,-7,3,2,1]), 3),
            ( "[1,1,1,1,1,1,1]", self.mf([1,1,1,1,1,1,1]), 1),
            ( "[2,1,1,1,1,1,1]", self.mf([2,1,1,1,1,1,1]), 2),
            ( "[1,1,1,1,1,1,2]", self.mf([1,1,1,1,1,1,2]), 2),
            ( "[1,1,1,2,1,1,1]", self.mf([1,1,1,2,1,1,1]), 2),
        ])


if __name__ == '__main__':
    p1 = Parsons_Karavirta2012Figure3("Karavirta2012Figure3", "findmax")
    rc = p1.go()

import sys
import O


# Brent Reeves
# Winter '22
#

class Parsons_Weinmann2021figure1(O.Parsons):

    def stringOrFunction(self, jive):
        # print("stringOrFunction: ", jive, file=sys.stderr)
        note, f, arg1, arg2, expect = jive
        v1 = None
        v2 = None
        try:
            v1 = f(arg1)
            # print('stringOrFunction: f(arg1)', file=sys.stderr)
            v2 = None
            # print('mf worked...:', v1)
            if (callable(v1)):
                try:
                    # print('stringOrFunction: v1 was callable', file=sys.stderr)
                    v2 = v1(arg2)
                    return {"msg": note, "ok": v2 == expect, "actual": v2}
                except:
                    # print('stringOrFunction: v1 was NOT callable', file=sys.stderr)
                    ff = f'ERROR: Weinmann2021figure1 stringOrFunction 1  Folder: {self.folder} File: {self.dafile}\nNote: {note} arg1: {arg1} arg2: {arg2}'
                    ee = {"error" : ff, "exception" : str(sys.exc_info()[1])}
                    print(ee, file=sys.stderr)
                    return {"msg": note, "ok": False, "actual": v2}
            else:
                if (type(v1) is str):
                    # print("stringOrFunction returning v1", file=sys.stderr)
                    return {"msg": note, "ok": v1 == expect, "actual": v1}

            # print("stringOrFunction returning False v1", file=sys.stderr)
            return {"msg": note, "ok": False, "actual": v1}
            
        except:
            # print("safely caught exception")
            ff = f'ERROR: Weinmann2021figure1 stringOrFunction 2  Folder: {self.folder} File: {self.dafile}\nNote: {note} arg1: {arg1} arg2: {arg2}'
            ee = {"error" : ff, "exception" : str(sys.exc_info()[1])}
            print(ee, file=sys.stderr)

            # print("stringOrFunction returning False v1 bottom ", file=sys.stderr)
            return {"msg": note, "ok": False, "actual": v1}

        # return {"msg": note, "ok": v1 == expect, "actual": v1}

# Weinmann2021figure1.txt
# def last_even_adder(li):
# 	for index in range (len(li)-1,-1,-1):
# # 		if(li(index)) % 2 == 0: # oops () vs []
# 		if(li[index]) % 2 == 0:
# 			return lambda x : x + li(index)
# 	return 'All odd'

    def testit(self):
        # print("Ericson2022figure4:testit: ", self.dafile)
        self.predicates = []
        args = [
            ( "[] = 'All odd'", self.mf, [], '', 'All odd' ),
            ( "[1] = 'All odd'", self.mf, [1], '', 'All odd' ),
            ( "[1,3] = 'All odd'", self.mf, [1,3], '', 'All odd' ),
            ( "[1,3,5] = 'All odd'", self.mf, [1,3,5], '', 'All odd' ),
            ( "[3,3,3,3] = 'All odd'", self.mf, [3,3,3,3], '', 'All odd' ),
            ( "[-3,-3,-3,-3] = 'All odd'", self.mf, [-3,-3,-3,-3], '', 'All odd' ),
            ( "[0] = 0", self.mf, [0], 3, 3 ),
            ( "[0, 0] = 0", self.mf, [0, 0], 4, 4 ),
            ( "[0, 0, 0] = 0", self.mf, [0, 0, 0], 5, 5 ),
            ( "[2, 0, 0] = 0", self.mf, [2, 0, 0], 5, 5 ),
            ( "[0, 2, 0] = 0", self.mf, [0, 2, 0], 5, 5 ),
            ( "[0, 0, 2] = 0", self.mf, [0, 0, 2], 5, 7 ),
            ( "[1, 0, 0] = 0", self.mf, [1, 0, 0], 5, 5 ),
            ( "[0, 1, 0] = 0", self.mf, [0, 1, 0], 5, 5 ),
            ( "[0, 0, 1] = 0", self.mf, [0, 0, 1], 5, 5 ),
            ( "[1, 2, 0] = 0", self.mf, [1, 2, 0], 5, 5 ),
            ( "[0, 1, 2] = 5 7", self.mf, [0, 1, 2], 5, 7 ),
            ( "[0, 2, 1] = 5 7", self.mf, [0, 2, 1], 5, 7 ),
            ( "[4, 1, 1] = 5 9", self.mf, [4, 1, 1], 5, 9 ),
            ( "[-4, 1, 1] = 5 1", self.mf, [-4, 1, 1], 5, 1 ),

        ]
        self.predicates = list(map ( self.stringOrFunction, args ))
        
        good = list(filter(lambda x:  x["ok"] == True, self.predicates ))
        bad = list(filter(lambda x:  x["ok"] == False, self.predicates ))

        return len(bad), good, bad


if __name__ == '__main__':
    p1 = Parsons_Weinmann2021figure1("Weinmann2021figure1", "last_even_adder")
    rc = p1.go()
