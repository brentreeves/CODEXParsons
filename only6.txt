# just the 6 in the paper

# Weinmann2021figure1.txt
def last_even_adder(li):
	for index in range (len(li)-1,-1,-1):
		# if(li(index)) % 2 == 0:
		if(li[index]) % 2 == 0:
			return lambda x : x + li(index)
	return 'All odd'


# Haynes-Magyar2022figure2.txt
def has22(nums):
	for i in range (len(numbs)-1):
		if nums[i] == 2 and num [i+1] == 2:
			return True
	return False


# Haynes-Magyar2022figure4.txt
def countInRange(target, start, end, numList):
	count = 0
	for index in range(start, end+1):
		current = numList[index]
		if current == target:
			count = count + 1
	return count

# Ericson2022figure2.txt
def check_guess(guess,target):
	if guess < target:
		return 'too low'
	elif guess == target:
		return 'correct'
	else:
		return 'too high'

# Ericson2022figure4.txt
def alarm_clock(day, vacation):
	if vacation:
		if day == 0 or day == 6:
			return 'off'
		else:
			return '10:00'
	else:
		if day == 0 or day == 6:
			return '10:00'
		else:
			return '7:00'

# Hou2022figure2.txt
def filter_strings(str_list):
	new_list = []
	for word in str_list:
		if len(word) > 3:
			new_list.append(word)
	return new_list

# ------------------------------------------------------------------
#
# others from literature
#

# Ericson2017figure1.txt
def getSum(numlist):
        sum = 0
        for num in numList:
                sum = sum + num
                return sum

# Ericson2017figure4.txt
def avgValuesInRange(numList, start, end):
	sum = 0
	for index in range(start,end-1):
		value = numList[index]
		sum = sum + value
	if (end - start + 1) >= 1:
		return sum / (end - start + 1)
	return 0


# Ericson2018figure5.txt
def isLevel(elList, start, end):
	max = elList[start]
	min = max
	for index in range(start, end+1):
		value = elList[index]
		if value > max:
			max = value
		if value < min:
			min = value
	return (max-min) <= 10

# Ericson2022figure2.txt
def check_guess(guess,target):
	if guess < target:
		return 'too low'
	elif guess == target:
		return 'correct'
	else:
		return 'too high'

# Ericson2022figure3.txt

 class Person:
         def_init_(self, first, last):
             self.first = first
             self.last = last

         def_str_(self):
             return (self.first + " " + self.last)
    
 	def initials(self):
 	    return(self.first[0] + self.last[0])


# Ericson2022figure4.txt
def alarm_clock(day, vacation):
	if vacation:
		if day == 0 or day == 6:
			return 'off'
		else:
			return '10:00'
	else:
		if day == 0 or day == 6:
			return '10:00'
		else:
			return '7:00'

# Ericson2022figure8.txt
def getAverageDropLowest(numList):
	if len(numList) == 0:
		return 0
	sum = 0
	lowest = numList[0]
	for index in range(len(numList)):
		value = numList[index]
		sum = sum + value
		if value < lowest:
			lowest = value
	return (sum - lowest) / (len(numList) - 1)



# Hou2022figure2.txt
def filter_strings(str_list):
	new_list = []
	for word in str_list:
		if len(word) > 3:
			new_list.append(word)
	return new_list

#Karavirta2012Figure3.txt
def findmax(alist):
	if len(alist) > 0:
		curmax=alist[0]
		for item in alist:
			if item > curmax:
				curmax=item

	return curmax


